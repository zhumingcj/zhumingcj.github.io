<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Matrix</title>
      <link href="/2019/06/27/Matrix/"/>
      <url>/2019/06/27/Matrix/</url>
      
        <content type="html"><![CDATA[<h1 id="求解矩阵的高斯消元法"><a href="#求解矩阵的高斯消元法" class="headerlink" title="求解矩阵的高斯消元法"></a>求解矩阵的高斯消元法</h1><p>高斯消元法是求解矩阵最基础的一种算法，具有泛化性强的优点。</p><a id="more"></a><h2 id="消元过程"><a href="#消元过程" class="headerlink" title="消元过程"></a>消元过程</h2><p>对于方程组$Ax=b$（其中A为n阶方阵）可由n-1个消元过程和n-1个回代过程完成求解</p><script type="math/tex; mode=display">\begin{cases}a_{11}x_1+a_{12}x_2+a_{13}x_3+\cdots+a_{1n}x_n=&b_1\\\vdots\\a_{n1}x_1+a_{n2}x_2+a_{n3}x_3+\cdots+a_{nn}x_n=&b_n&\end{cases}\\\begin{pmatrix}a_{11}&a_{12}&a_{13}&\dots&a_{1n}\\a_{21}&a_{22}&a_{23}&\dots&a_{2n}\\\vdots&&&&\vdots\\a_{n1}&a_{n2}&a_{n3}&\dots&a_{nn}\end{pmatrix}\begin{pmatrix}x_1\\x_2\\\vdots\\x_n\end{pmatrix}=\begin{pmatrix}b_1\\b_2\\\vdots\\b_n\end{pmatrix}</script><ol><li><p>矩阵的消元过程(在矩阵有解的情况下)</p><ul><li>第一步消元</li></ul><p>$a_{ij}^{(1)}=a_{ij}^{(0)}-\frac{a_{i1}^{(0)}}  {a_{11}^{(0)}}a_{1j}^{(0)}=a_{ij}^{(0)}-l_{i1}^{(0)}a_{1j}^{(0)} ,\quad i=2,3,\dots,n;j=2,3,\dots,n$</p><p>$b_{i}^{(1)}=b_{i}^{(0)}-\frac{a_{i1}^{(0)}}  {a_{11}^{(0)}}b_{1}^{(0)}=b_{i}^{(0)}-l_{i1}^{(0)}b_{1}^{(0)} ,\quad i=2,3,\dots,n$</p><p>$l_{i1}\triangleq \frac {a_{i1}^{(0)}} {a_{11}^{(0)}},\quad i=2,3,\dots,n$</p><ul><li><p>第k步消元</p><p>$a_{ij}^{(k)}=a_{ij}^{(k-1)}-\frac{a_{ik}^{(k-1)}}  {a_{kk}^{(k-1)}}a_{kj}^{(k-1)}=a_{ij}^{(k-1)}-l_{ik}^{(k-1)}a_{kj}^{(k-1)} ,\quad i=k+1,k+2,\dots,n;j=k=1,k+2,\dots,n$</p><p>$b_{i}^{(k)}=b_{i}^{(k-1)}-\frac{a_{ik}^{(k-1)}}  {a_{kk}^{(k-1)}}b_{k}^{(k-1)}=b_{i}^{(k-1)}-l_{ik}^{(k-1)}b_{k}^{(k-1)} ,\quad i=k+1,k+2,\dots,n$</p><p>$l_{ik}\triangleq \frac {a_{ik}^{(k-1)}} {a_{kk}^{(k-1)}},\quad i=k+1,k+2,\dots,n$</p></li><li><p>消元完成后</p><script type="math/tex; mode=display">A^{(n-1)}=\begin{pmatrix}a_{11}^{(0)}&a_{12}^{(0)}&a_{13}^{(0)}&\cdots&\cdots&a_{1n}^{(0)}\\&a_{22}^{(1)}&a_{23}^{(1)}&\cdots&\cdots&a_{2n}^{(1)}\\&&\ddots\\&&&a_{kk}^{(k-1)}&\cdots&a_{kn}^{(k-1)}\\&&&&\ddots&\vdots\\&&&&&a_{nn}^{(n-1)}\end{pmatrix},\quadb^{(n-1)}=\begin{pmatrix}b_{1}^{(0)}\\b_{2}^{(1)}\\\vdots\\b_{k}^{(k-1)}\\\vdots\\b_{n}^{(n-1)}\end{pmatrix}</script></li></ul></li></ol><ol><li>回代的过程<script type="math/tex; mode=display">\left\{\begin{array}{c}x_n=\frac{b_n^{n-1}}{a_{nn}^{(n-1)}}\\x_k=\frac{ {b_k}^{(k-1)-\sum_{j=k+1}^n(a_{kj}^{(k-1)}x_j)} } {a_{kk}^{(k-1)} },\quad k=n-1,n-2,\dots,2,1.\end{array}\right.</script></li></ol><h2 id="算法的分析"><a href="#算法的分析" class="headerlink" title="算法的分析"></a>算法的分析</h2><ul><li><p>[ ] 在消元的过程中，计算$l_{ik}\triangleq \frac {a_{ik}^{(k-1)}} {a_{kk}^{(k-1)}},\quad i=k+1,k+2,\dots,n$时共有n-k个除法，而计算$a_{ij}^{(k)}=a_{ij}^{(k-1)}-l_{ik}^{(k-1)}a_{kj}^{(k-1)} ,\quad i=k+1,k+2,\dots,n;j=k=1,k+2,\dots,n$时有$(n-k)^2$个乘法，计算$b_{i}^{(k)}=b_{i}^{(k-1)}-l_{ik}^{(k-1)}b_{k}^{(k-1)} ,\quad i=k+1,k+2,\dots,n$时也有n-k个乘法，消元共进行了n-1步，即$k=1,2,\dots,n-1$.</p></li><li><p>[ ] ==所以在消元过程中乘除法的运算量为==</p><script type="math/tex; mode=display">N_1=\sum_{k=1}^{n-1}((n-k)^2+2(n-k))=n^3/3+n^2/2-5n/6.</script></li></ul><ul><li><p>[ ] ==回代过程中乘除法的运算量为==</p><script type="math/tex; mode=display">   N_2=\sum_{k=1}^{n-1}(n-k)+n=n^2/2+n/2.</script><ul><li><p>[ ] ==所以高斯消元法解n阶矩阵的总乘除法运算量为==</p><p>$N=N_1+N_2=n^3/3+n^2-n/3$</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Numeric Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Decoractor Pattern</title>
      <link href="/2019/06/27/Decoractor-Pattern/"/>
      <url>/2019/06/27/Decoractor-Pattern/</url>
      
        <content type="html"><![CDATA[<p>装饰器模式是一个很著名的设计模式，经常被用于有切面需求的场景，比如插入日志、统计等的逻辑。装饰器模式的作用是能为已经存在的对象添加额外的功能。</p><a id="more"></a><h1 id="设计模式之装饰器模式"><a href="#设计模式之装饰器模式" class="headerlink" title="设计模式之装饰器模式"></a>设计模式之装饰器模式</h1><h2 id="装饰器模式的作用"><a href="#装饰器模式的作用" class="headerlink" title="装饰器模式的作用"></a>装饰器模式的作用</h2><ul><li>在不改变现有对象结构的基础上为其添加新的功能，且并不通过继承而是通过对象之间的关联来实现，使其更加灵活。</li><li>相比于继承来增加新功能（固定的），装饰器模式可以动态的增加新功能，并且功能之间可以进行组合来产生更多的功能，避免了增加功能时对对象的修改</li><li>这是一种实现AOP（面向切面编程）的方法，即将主业务逻辑之外的aspect抽离出来，降低代码的耦合度。</li></ul><h2 id="实现装饰器模式的关键"><a href="#实现装饰器模式的关键" class="headerlink" title="实现装饰器模式的关键"></a>实现装饰器模式的关键</h2><p>装饰器模式无非是要调用一堆方法，但是又不能直接在类中增加逻辑（开闭原则），也不通过继承来实现，而是交给装饰器来实现。那么问题的关键就在于保存这一堆方法，并且使他们之间的顺序可以动态的调整。装饰器模式是通过字段对方法进行缓存（实际上是缓存一个对象，然后调用对象的方法），再通过迭代调用将各个方法以一定的顺序连接起来</p><h2 id="装饰器实现步骤"><a href="#装饰器实现步骤" class="headerlink" title="装饰器实现步骤"></a>装饰器实现步骤</h2><ol><li><p>建立一个继承自对象抽象类的装饰器基类，其中包括缓存字段，构造函数和方法调用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">BaseStudentDecorator</span> : <span class="title">AbstractStudent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> AbstractStudent _student = <span class="literal">null</span>;<span class="comment">//用于缓存一个对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BaseStudentDecorator</span>(<span class="params">AbstractStudent student</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._student = student;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Finish</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._student.Finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>依照单一职责原则创建实现具体功能的装饰器，在其中调用父类的构造函数并复写父类的方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StudentLearningDecoractor</span>(<span class="params">AbstractStudent student</span>) : <span class="title">base</span>(<span class="params">student</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Finish</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//你要实现的逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">base</span>.Finish();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//创建多个，根据要实现的逻辑</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>对装饰器要实现的功能进行注册并调用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = <span class="keyword">new</span> StudentPreviewDecoractor(student);</span><br><span class="line">          student = <span class="keyword">new</span> StudentLearningDecoractor(student);<span class="comment">//添加了一个功能</span></span><br><span class="line">          student = <span class="keyword">new</span> StudentReviewDecorator(student);<span class="comment">//添加了一个功能</span></span><br><span class="line">          student = <span class="keyword">new</span> StudentPlayDecoractor(student);<span class="comment">//添加了一个功能</span></span><br><span class="line">          student = <span class="keyword">new</span> StudentSleeepDecorator(student);<span class="comment">//添加了一个功能</span></span><br><span class="line">          student.Finish();<span class="comment">//调用</span></span><br></pre></td></tr></table></figure></li></ol><p>   抽象类和具体类</p>   <figure class="highlight c#"><figcaption><span>public abstract class AbstractStudent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractStudent</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">Finish</span>(<span class="params"></span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentCommon</span>:<span class="title">AbstractStudent</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Finish</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">base</span>.Name&#125;</span> finished learning"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentPreview</span>: <span class="title">StudentCommon</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Finish</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>           &#123;</span><br><span class="line">               <span class="keyword">base</span>.Finish();</span><br><span class="line">               Console.WriteLine(<span class="string">"先进行复习"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>   运行结果：</p><p>   <img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190627/5ckTbxL1rvl1.png?imageslim" alt="mark"></p><h2 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h2><ul><li><p>[ ] 当我们在注册方法时，student（不同类型）对象会被保存在基类中</p></li><li><p>[ ] 当我们最后调用finish方法时，会先调用StudentSleeepDecorator的finish方法，finish方法又会调用基类的finish方法，而基类的finish方法会调用之前缓存的student的finish方法…..，从而形成了一系列的调用，相当于一个链表结构。</p></li><li><p>[ ] 在我们实现具体的装饰器时，==base.Finish()和你要实现的逻辑的顺序直接影响到这些逻辑调用的顺序==。当你要实现的逻辑放在前面时，相当于堆栈，遵从先进后出的原则，因此先注册的方法会最后执行（1）；当base.Finish()放在前面时，相当于队列，遵从先进先出，因此先注册的方法最先执行（2）。</p></li><li><p>[ ] 所以当我们要实现在主逻辑（这里为Console.WriteLine($”{base.Name} finished learning”)，即已有对象的方法）前增加若干方法，在主逻辑后也增加若干方法时：</p><ul><li><p>在编写装饰器时时，对于主逻辑之前要执行的方法应按上述（1）来编写装饰器；而对于主逻辑之后要执行的方法应按上述（2）来编写装饰器。</p></li><li><p>在注册时，对于主逻辑之前要执行的方法要逆序注册；对于主逻辑之后要执行的方法要顺序注册</p></li></ul></li></ul><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>  观察者模式较其他设计模式来说要更难以理解，相要真正理解还是得自己敲一下代码，断点运行一下。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-观察者模式</title>
      <link href="/2019/06/27/Observer%20Pattern/"/>
      <url>/2019/06/27/Observer%20Pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之观察者模式"><a href="#设计模式之观察者模式" class="headerlink" title="设计模式之观察者模式"></a>设计模式之观察者模式</h1><a id="more"></a><h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a><strong>什么是观察者模式</strong></h2><p>形象的来说，观察者模式包含一个被观察者（subject）以及若干观察者（observer），observer观察subject，当subject发出一个动作时，observer观察到后作出相应反应。在程序中则是某个类（subject）达到某种触发条件后向其他类发送通知（通常是执行某些方法的信息），然后这些类执行相应的方法。</p><h2 id="观察者模式的作用"><a href="#观察者模式的作用" class="headerlink" title="观察者模式的作用"></a><strong>观察者模式的作用</strong></h2><ol><li>用于程序的解耦。观察者模式通过依赖于抽象的接口来减少类与类之间的直接依赖。</li><li>可以作为一种通知的机制，将更新通知给其它的对象。</li></ol><h2 id="观察者模式的缺点"><a href="#观察者模式的缺点" class="headerlink" title="观察者模式的缺点"></a><strong>观察者模式的缺点</strong></h2><ul><li>当一个被观察者有很多的直接或间接的观察者时，要通知到所有的观察者需要耗费很多的时间。</li><li>当被观察者之间循环依赖时（比如：A通知B改变C，C的改变引起A的改变，继而又触发了A通知B），程序会进入循环调用，导致系统崩溃。</li></ul><h2 id="观察者模式的实现要点"><a href="#观察者模式的实现要点" class="headerlink" title="观察者模式的实现要点"></a><strong>观察者模式的实现要点</strong></h2><ol><li>要创建一个接口用以约束所有被观察者，提供消息传递的通道</li><li>被观察者需要有一个存放消息的容器，一般是接口的一个列表；同时被观察者要具有订阅观察者和取消订阅的方法，用以动态的增加减少观察者的数量。</li><li>实现消息的传递——通过调用接口列表中的各个方法。</li></ol><p>代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">            cat.Add(<span class="keyword">new</span> Dog());</span><br><span class="line">            cat.Add(<span class="keyword">new</span> Duck());</span><br><span class="line">            cat.Add(<span class="keyword">new</span> mouse());           </span><br><span class="line">            cat.Add(<span class="keyword">new</span> people());</span><br><span class="line">            cat.Miao();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Ioberver</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Action</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title">Chicken</span>:<span class="title">Ioberver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Woo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Woo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125; Woo"</span>, <span class="keyword">this</span>.GetType().Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Ioberver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Wang();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Wang</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">this</span>.GetType().Name&#125;</span> 汪汪汪"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Duck</span> : <span class="title">Ioberver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Gaga();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Gaga</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">this</span>.GetType().Name&#125;</span> 嘎嘎嘎"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title">mouse</span> : <span class="title">Ioberver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Zhi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Zhi</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">this</span>.GetType().Name&#125;</span> 吱吱吱"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Cat</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Miao</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125; miao"</span>,<span class="keyword">this</span>.GetType().Name);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>._ObserverList!=<span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>._ObserverList.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> observer <span class="keyword">in</span> _ObserverList)</span><br><span class="line">                &#123;</span><br><span class="line">                    observer.Action();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> List&lt;Ioberver&gt; _ObserverList = <span class="keyword">new</span> List&lt;Ioberver&gt;();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Ioberver observer</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._ObserverList.Add(observer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Ioberver observer</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._ObserverList.Remove(observer);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><a href="http://pte2s6ppx.bkt.clouddn.com/blog/20190627/Pwc2H0fM3pGs.png?imageslim" target="_blank" rel="noopener"><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190627/Pwc2H0fM3pGs.png?imageslim" alt="mark"></a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShortCut Key for Typora</title>
      <link href="/2019/06/21/Tips%20for%20Typora/"/>
      <url>/2019/06/21/Tips%20for%20Typora/</url>
      
        <content type="html"><![CDATA[<p>刚建立了自己的博客，来发一篇文章:smiley:</p><p>最近刚学会使用Typora，刚好把一些快捷键整理一下。</p><a id="more"></a><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><ol><li><p>标题    ctrl+1/2/3…</p><p>数字表示标题的级数 </p></li><li><p>下划线    ctrl+u</p><p>效果：<u>这是下划线</u></p></li><li><p>删除线    shift+alt+5</p><p>效果：<del>这是删除线</del></p></li><li><p>字体加粗    ctrl+b</p><p>效果：<strong>加粗了</strong></p></li><li><p>字体倾斜   ctrl+i</p><p>效果：<em>倾斜的字</em></p></li><li><p>无序列表   -+space+内容</p><p>效果  </p><ul><li>牛奶</li><li>面包<ul><li>巧克力（可嵌套）</li></ul></li></ul></li><li><p>引用   &gt;+space或ctrl+shift+q</p><blockquote><p>效果：这是引用</p></blockquote></li><li><p>插入地址   ctrl+k</p><p><a href="www.baidu.com">百度</a></p></li><li><p>插入表格   ctrl+t</p><p>效果：</p><p>| 周一     | 周二 | 周三 | 周四 | 周五 |<br>| ———— | —— | —— | —— | —— |<br>| 微积分   | 放假 | 放假 | 放假 | 放假 |<br>| 大学物理 | 放假 | 放假 | 放假 | 放假 |<br>| 英语     | 放假 | 放假 | 放假 | 放假 |</p></li></ol><ol><li><p>回到文章顶部   ctrl+home</p><p>效果：无法展示:joy:</p></li><li><p>自动产生目录   [TOC]+enter</p><p>效果：(只有一个标题，将就看一下效果)</p><p>[TOC]</p></li><li><p>选中一整行   ctrl+l</p><p>额，无法展示效果</p></li><li><p>插入代码块   ctrl+alt+b(可能需要自己设置)</p><p>效果：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"><span class="keyword">string</span>[]args</span>)</span>&#123;</span><br><span class="line">    ConSole.WriteLine(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>搜索内容   ctrl+f    替换   ctrl+h</p><p>效果：无</p></li><li><p>强调、着重标记   ctrl+shift+~(tab上面那个)</p><p>效果：<code>这是重点 这是重点 则是重点</code></p></li><li><p>分隔线   —-+enter或<em>*</em>+enter</p><p>效果：</p><hr></li></ol><ol><li><p>数学公式   $$+enter</p><p>效果：</p><script type="math/tex; mode=display">|i j k |a+b+c^5=2ab</script></li><li><p>表情   :+表情的英文单词</p><p>效果：:artificial_satellite:</p></li><li><p>快速创建新文件   ctrl +n    快速关闭  ctrl+w</p></li><li><p>显示/隐藏大纲   ctrl+l</p></li><li><p>高亮   == 文字 ==（中间没有空格）</p></li><li><p>标题变为普通文本   ctrl+0</p></li><li><p>脚注   <sup><a href="#fn_" id="reffn_"></a></sup></p><p>效果：这是一个脚注<sup><a href="#fn_1" id="reffn_1">1</a></sup></p></li><li><p>行内数学公式   $+esc(然后输入Tex命令)</p></li></ol><p>$\lim_{x\to\infty}\exp(-x)=0$</p><ol><li><p>上下标   <code>x^2^2</code>   <code>H~2~O</code></p><p>效果：x^2^   H~2~O</p></li></ol><p>​    </p><p>​    </p><blockquote id="fn_1"><sup>1</sup>. 注释<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本编辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/2019/06/21/my-first-blog/"/>
      <url>/2019/06/21/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的第一篇blog"><a href="#这是我的第一篇blog" class="headerlink" title="这是我的第一篇blog"></a>这是我的第一篇blog</h1><h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p>终于成功了很开心</p><p>:happy:</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
