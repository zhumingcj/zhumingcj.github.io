<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rotation、Grad and Divergence</title>
      <link href="/2019/07/09/rotation%E3%80%81grad-and-divergence/"/>
      <url>/2019/07/09/rotation%E3%80%81grad-and-divergence/</url>
      
        <content type="html"><![CDATA[<h1 id="梯度、散度、旋度"><a href="#梯度、散度、旋度" class="headerlink" title="梯度、散度、旋度"></a>梯度、散度、旋度</h1><p>梯度、散度、旋度是研究向量场的几个重要的量，它们表征着向量场的性质，在理论研究中有着重要的地位。梯度表示标量函数增加或减少的方向；散度表示向量场远离源的程度；旋度则表示向量场围绕某个中心旋转的程度。</p><a id="more"></a><h2 id="梯度、散度、旋度的计算公式"><a href="#梯度、散度、旋度的计算公式" class="headerlink" title="梯度、散度、旋度的计算公式"></a>梯度、散度、旋度的计算公式</h2><script type="math/tex; mode=display">\nabla A=(\frac{\partial A}{\partial x},\frac{\partial A}{\partial y},\frac{\partial A}{\partial z})\\\nabla\bullet A=(\frac{\partial A_{x}}{\partial x}+\frac{\partial A_{y}}{\partial y}+\frac{\partial A_{z}}{\partial z})\\\nabla \times A=(\frac{\partial A_{y}}{\partial z}-\frac{\partial A_{z}}{\partial y},\frac{\partial A_{z}}{\partial x}-\frac{\partial A_{x}}{\partial z},\frac{\partial A_{x}}{\partial y}-\frac{\partial A_{y}}{\partial x})</script><h2 id="梯度、散度、旋度的嵌套运算"><a href="#梯度、散度、旋度的嵌套运算" class="headerlink" title="梯度、散度、旋度的嵌套运算"></a>梯度、散度、旋度的嵌套运算</h2><ol><li>证明旋度的散度=0（$\nabla\bullet (\nabla\times A)=0$）</li></ol><script type="math/tex; mode=display">\begin{align}\nabla\bullet (\nabla\times A)=\nabla\bullet(\frac{\partial A_{y}}{\partial z}-\frac{\partial A_{z}}{\partial y},\frac{\partial A_{z}}{\partial x}-\frac{\partial A_{x}}{\partial z},\frac{\partial A_{x}}{\partial y}-\frac{\partial A_{y}}{\partial x})\\=\frac{\partial^{2} A_{y}}{\partial z \partial x}-\frac{\partial^{2} A_{z}}{\partial y \partial x}+\frac{\partial^{2} A_{z}}{\partial x \partial y}-\frac{\partial^{2} A_{x}}{\partial z \partial y}+\frac{\partial^{2} A_{}x}{\partial y \partial z}-\frac{\partial^{2} A_{y}}{\partial x \partial z}\\=0\end{align}</script><ol><li>旋度的梯度（$\nabla (\nabla\times A)$）</li></ol><script type="math/tex; mode=display">\nabla (\nabla\times A)=\nabla(\frac{\partial A_{y}}{\partial z}-\frac{\partial A_{z}}{\partial y},\frac{\partial A_{z}}{\partial x}-\frac{\partial A_{x}}{\partial z},\frac{\partial A_{x}}{\partial y}-\frac{\partial A_{y}}{\partial x})\\=(\frac{\partial^{2} A_{y}}{\partial z \partial x}-\frac{\partial^{2} A_{z}}{\partial y \partial x},\frac{\partial^{2} A_{z}}{\partial x \partial y}-\frac{\partial^{2} A_{x}}{\partial z \partial y},\frac{\partial^{2} A_{}x}{\partial y \partial z}-\frac{\partial^{2} A_{y}}{\partial x \partial z})\\</script><ol><li>旋度的旋度（$\nabla\times (\nabla\times A)$）</li></ol><script type="math/tex; mode=display">\nabla\times (\nabla\times A)=\nabla\times(\frac{\partial A_{y}}{\partial z}-\frac{\partial A_{z}}{\partial y},\frac{\partial A_{z}}{\partial x}-\frac{\partial A_{x}}{\partial z},\frac{\partial A_{x}}{\partial y}-\frac{\partial A_{y}}{\partial x})\\=(\frac{\partial^{2} A_{z}}{\partial x \partial z}-\frac{\partial^{2} A_{x}}{\partial z^{2}}-\frac{\partial^{2} A_{x}}{\partial y^{2}}+\frac{\partial^{2} A_{y}}{\partial x \partial y},\frac{\partial^{2} A_{x}}{\partial y \partial z}-\frac{\partial^{2} A_{y}}{\partial x^{2}}-\frac{\partial^{2} A_{y}}{\partial z^{2}}+\frac{\partial^{2} A_{z}}{\partial z \partial x},\frac{\partial^{2} A_{y}}{\partial z \partial y}-\frac{\partial^{2} A_{z}}{\partial y^{2}}-\frac{\partial^{2} A_{z}}{\partial x^{2}}+\frac{\partial^{2} A_{x}}{\partial z \partial x})</script><ol><li>梯度的旋度=$\overrightarrow{0}$（$\nabla\times(\nabla A)=0$）</li></ol><script type="math/tex; mode=display">\nabla\times(\nabla A)=\nabla\times(\frac{\partial A}{\partial x},\frac{\partial A}{\partial y},\frac{\partial A}{\partial z})\\=(\frac{\partial^{2}A}{\partial y \partial x}-\frac{\partial^{2}A}{\partial x \partial y},\frac{\partial^{2}A}{\partial x \partial z}-\frac{\partial^{2}A}{\partial z \partial x},\frac{\partial^{2}A}{\partial x \partial y}-\frac{\partial^{2}A}{\partial y \partial x})\\=(0,0,0)</script><ol><li><p>梯度的梯度（略）</p></li><li><p>梯度的散度（$\nabla\times(\nabla A)$）</p><script type="math/tex; mode=display">\nabla\times(\nabla A)=\frac{\partial^{2}A}{\partial x^{2}}+\frac{\partial^{2}A}{\partial y^{2}}+\frac{\partial^{2}A}{\partial z^{2}}</script></li><li><p>散度的梯度（$\nabla(\nabla\bullet A)$）</p><script type="math/tex; mode=display">\nabla(\nabla\bullet A)=\nabla(\frac{\partial A_{x}}{\partial x}+\frac{\partial A_{y}}{\partial y}+\frac{\partial A_{z}}{\partial z})</script></li></ol><h2 id="有关场："><a href="#有关场：" class="headerlink" title="有关场："></a><strong>有关场：</strong></h2><ol><li>若一个向量场的散度=0，则这个场是无源场；若一个向量场的旋度=0，则这个向量场是无旋场又称保守场。</li></ol><ol><li>一个旋度场的散度=0，可知旋度场是一个无源场；一个梯度场的旋度=0，可知梯度场是一个无旋场(保守场)。综上可知，仅通过散度无法确定一个向量场，因为一个旋度场叠加上一个有源场不改变这个场的散度；同样仅通过旋度也无法确定一个向量场，因为一个有旋场叠加上一个梯度场不改变其旋度。</li></ol><ol><li>散度具有指向的意义，对于匀强的向量场，散度等于零意味着向量场的方向是一致的。</li></ol><ol><li>散度的梯度用于表示源的分布情况。在实际中物质的扩散可以用散度的梯度来刻画，表示物质扩散最快的方向。（即通量密度最大的地方）。</li></ol><ol><li><p>旋度的分量具有实际意义，对于旋度的x分量表示yoz平面的旋转程度，其它分量也是如此。</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190710/p61VjF1hKDeH.png?imageslim" alt="mark"></p></li></ol><p>如图1为向量场$A=-x^{2}\overrightarrow{j}$,若把一块小薄板放在图的右侧，则薄板会顺时针偏转；若放在左边则逆时针偏转。根据右手定则，右边的旋度为z轴负向；左边的旋度为z轴正向。可以想象旋转程度与x变化一个微小的量时A的变化程度的极限有关。因为A无x的分量所以，所以旋转程度取决于y分量的变化率，即$(\nabla\times A)_{z}=\frac{\partial A_{y}}{\partial x}$</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190710/OxW34dN8NETS.png?imageslim" alt="mark"></p><p>如图2所示的向量场可分解$A_{x}$为和$A_{y}$两部分，每一部分分量型如图1。此时$(\nabla\times A)_{z}=\frac{\partial A_{y}}{\partial x}-\frac{\partial A_{x}}{\partial y}$，从推导可知$\nabla\times A$的x、y、z分量分别表示yoz平面、xoz平面以及xoy平面的旋转程度。</p><ol><li><p>亥姆霍兹定理</p><p>若矢量场在无限空间中处处单值，且其导数连续有界，而源分布在有限空间内，则矢量场由其旋度、散度和边界条件唯一确定；且可表示为一个标量场的梯度和一个矢量场的旋度之和。</p><script type="math/tex; mode=display">\overrightarrow{F}=-\nabla\varphi+\nabla\times\overrightarrow{A}</script><p>换言之，矢量场可以有一个有源场和一个有旋场以及边值条件唯一确定。其中标量场的梯度为无旋场（有源场），向量场的旋度为有旋场（无源场）。</p></li><li><p>有关旋度的旋度的恒等式</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190710/WEacukbenVci.png?imageslim" alt="mark"></p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190710/MVW0sPAjAKDW.png?imageslim" alt="mark"></p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190710/iA6oC7wgULbc.png?imageslim" alt="mark"></p></li><li><p>电磁场理论</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190710/UWll8sT8J6z0.png?imageslim" alt="mark"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP Algorithm</title>
      <link href="/2019/07/09/kmp-algorithm/"/>
      <url>/2019/07/09/kmp-algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h1><p>KMP算法是子串搜索算法中最有效、最有名的一个算法，它有效地减少了匹配子串时的比较次数，降低了时间复杂度，其中蕴含算法的思想更是值得学习的。</p><a id="more"></a><h1 id="暴力子串搜索算法"><a href="#暴力子串搜索算法" class="headerlink" title="暴力子串搜索算法"></a>暴力子串搜索算法</h1><p>步入正题之前，让我们先来看看最简单的子串搜索算法，分析其问题的所在。</p><p>暴力子串搜索就是采用双循环，先比较主串和模式串的第一位，再比较第二位，以此类推，直至比较结果不匹配，则主串前移，继续重复上述过程，；若直至模式串末位都匹配，则找到目标。</p><p>程序组织如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static int Search(string main_str, string pattern_str)</span><br><span class="line">           &#123;</span><br><span class="line">               int m = main_str.Length;</span><br><span class="line">               int n = pattern_str.Length;</span><br><span class="line">               int target = -1;</span><br><span class="line">               for (int i = 0; i &lt; m-n; i++)</span><br><span class="line">               &#123;</span><br><span class="line">                   for (int j = 0; j &lt; n; j++)</span><br><span class="line">                   &#123;</span><br><span class="line">                       if (main_str[i+j]!=pattern_str[j])</span><br><span class="line">                       &#123;</span><br><span class="line">                           break;</span><br><span class="line">                       &#125;</span><br><span class="line">                       if (j == n - 1)</span><br><span class="line">                       &#123;</span><br><span class="line">                           target = i;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               return target;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h4 id="暴力子串搜索算法的分析"><a href="#暴力子串搜索算法的分析" class="headerlink" title="暴力子串搜索算法的分析"></a>暴力子串搜索算法的分析</h4><p>可以看到，以这种方式进行搜索，在最坏的情况下要进行n(m-n)次运算，所以它的时间复杂度为O(n(m-n))，当数据量很大的时候，此种算法的效率很低。</p><h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><p>在前面我们看到暴力法搜索会耗费很多的时间，那么该如何改进呢？如果要减少运算次数，那么必须减少循环的次数，也就是不能一个一个的比较，我们希望第二次搜索可以在第一次的基础上，从最优的位置继续开始循环。也就是说，我们要充分利用前一次搜索失败的信息。下面我们来具体分析如何利用上一次搜索的信息：</p><h4 id="KMP算法的关键——next-函数"><a href="#KMP算法的关键——next-函数" class="headerlink" title="KMP算法的关键——next()函数"></a>KMP算法的关键——next()函数</h4><h5 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h5><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190711/3eDxaJzhJQot.png?imageslim" alt="mark"></p><p>如图，在每次不匹配时，我们可以利用前面的信息来移动模式串（实际上我们可以知道匹配开始点到不匹配点之间主串的字符），图中第一次匹配在第五个位置匹配失败，则我们可以知道主串前四位是abda，那么我们可以知道模式串向右移动1、2位都是不匹配的，因此应该移动3位，即移动到第二个a的位置。由此我们可以猜测每次匹配失败时，模式串向右移动的最佳长度和模式串自身的结构和失败的位置有关，即是关于模式串序号的一个函数。我们把这个函数记为next（i），下面是一个示例。</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190711/NfFl258kJU2a.png?imageslim" alt="mark"></p><p><strong>通过上面的示例以及分析我们可以知道，如果记模式串匹配失败前的内容为P(i),则我们希望找一个k使得P(i)的前k项和后k项是一样的，并且这个k是满足上面的条件中最大的那个，也就是说我们想找到一个P(i)的前缀，它也是模式串的后缀，并且长度是最大的，这个长度就是k。</strong></p><h5 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h5><p>上面我们得到了next（i）的求解方法，下面我们来分析一下为什么是这样的。</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190711/sp4KcQMFXAth.png?imageslim" alt="mark"></p><p>假设这是一次匹配，它将在序号为9的地方匹配失败，那么下一次匹配的时候我们应该将模式串移动到什么位置呢？显然模式串的开头是a，那么模式串一定得移到主串中a的位置（3,4,6）。如果模式串移动到3的位置，那么如下图</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190711/lUrrehoLvVUh.png?imageslim" alt="mark"></p><p>我们可以看到这种情况是不匹配的，因为从上一次的匹配中我们可以知道主串4位置是a，与b不匹配，移动到位置4的情况相同。</p><p>我们把问题抽象出来就是这样的</p><p>第一次匹配后，我们所知道的主串是这样的</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190711/SaHLEegNBynb.png?imageslim" alt="mark"></p><p>而模式串是这样的</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190711/6UpkPhhK9W6q.png?imageslim" alt="mark"></p><p>现在需要移动模式串进行第二次匹配，由于这种情况不好看清本质问题，所以我们假设第一次匹配后情况如下</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190711/Nui2Ht4Fp9wi.png?imageslim" alt="mark"></p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190711/cVvBoHewd6cA.png?imageslim" alt="mark"></p><p>图中，匹配失败处i=11，并且P(i)实际上就是主串已知的内容。由上面的讨论，我们可以知道模式串移动到3,5的位置是不匹配的，在这里我们可以知道为什么next（i）要找P(i)最长的前缀（同时是后缀），<code>因为如果模式串移动到一个以a（模式串的第一个字符，这里是a）开头但不是后缀的地方，如5的位置（参照下图），虽然前五个abcab是匹配的，但是第六个字符主串是c而模式串是a,换言之处于中间的以a开头的位置需要确保其后的每一个字符与模式串对应位置是匹配的,直到主串序号i之前，那么满足这样条件的一定是P(i)的一个后缀（因为上述条件保证了P(i)的一个后缀与模式串的一个前缀对应相等，而模式串的前缀一定也是P(i)的前缀，所以我们找的是P(i)中既是前缀又是后缀的字符串，理论上符合这样条件的都可以作为模式串移动的依据，但是为了尽可能的充分利用已知信息，我们应该找寻最长的那个前/后缀）</code></p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190711/OnPTCjtQ57n3.png?imageslim" alt="mark"></p><p>由此我们正式给出next(i)的定义</p><script type="math/tex; mode=display">def：\\next(i)=max(len(s))\quad\{s|s\sqsubset P(i),s\sqsupset P(i)\}\\注：\sqsubset表示...的前缀；\sqsupset表示...的后缀</script><h5 id="next函数计算的递推法"><a href="#next函数计算的递推法" class="headerlink" title="next函数计算的递推法"></a>next函数计算的递推法</h5><p>为了实现递推，我们把next(0)记为0，并记next(i)=$k_{i}$，那么递推关系如下：</p><ol><li><p>当P(i)=p($k_{i}$)时，$k_{i+1}$=$k_{i}+1$</p></li><li><p>当P(i)$\not=p(k_{i}$)时,</p><script type="math/tex; mode=display">f(i+1)=k_{i+1}=\left\{\begin{array}\k_{k_{i}}+1 \quad if \quad p(k_{k_{i}})=p(i)\\f(k_{k_{i}}+1)    \quad if \quad p(k_{k_{i}})\not=p(i)\end{array}\right.</script></li></ol><h5 id="递推法的详析"><a href="#递推法的详析" class="headerlink" title="递推法的详析"></a>递推法的详析</h5><p>下面先给出一个例子</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190712/aSQGCRgHsFKb.png?imageslim" alt="mark"></p><p>毫无疑问，next(1)一定为零（只有一个字符），next(2)也为零，next(3)等于1。</p><p>next(4)等于1可以这么计算：由于p(4)只比p(3)多了一个a，并且已知p(3)最长前后缀长度为1，那么只要比较p(4)的第一位（序号从零开始）与新增的那位是否相等，若相等，则next(4)=next(3)+1应该是显然的，若不等，并不能说next(4)=0，实际上next(4)也不为零。</p><p>因为新增位与最长前缀的下一位不相等，只能说明next(4)的值不可能大于或等于next(3)，但是可能是小于next(3)的某个值。那么应该如何计算next(4)的值呢？请看下图</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190712/XwownjjuOLc5.png?imageslim" alt="mark"></p><p>我们来观察next(10)的计算，p(10)新增的b与p(9)第六位的a，不同，所以next(10)&lt;6，现在我们任想找最长的前后缀，当然可以通过循环比较的方法来寻找，但是我们希望能充分利用已知的信息来简化计算。</p><p>刚才我们在已知最长前后缀abaaaba的基础上来比较下一位是否相等，结果不相等，自然而然，我们接下来应该找一个短一点的前后缀，再去比较这个短一点的前后缀的下一位是否相等，并且利用已知的条件可以很高效的找出这个短一点的前后缀，详析见下图</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190712/Wvtr5nrSrLeL.png?imageslim" alt="mark"></p><h2 id="KMP算法的组织"><a href="#KMP算法的组织" class="headerlink" title="KMP算法的组织"></a>KMP算法的组织</h2><p>与暴力求解不同，在KMP算法中，我们希望仅用一个循环来解决问题。循环变量为主串的下标，第一次匹配时，模式串下标自增，当匹配失败时，模式串的下标由next(i)函数来确定，然后继续与主串进行匹配。这样就比避免了每次匹配失败时模式串下标的回溯。</p><p>模式串的下标与next(i)的关系：下标=next(i)</p><h2 id="KMP的程序实现"><a href="#KMP的程序实现" class="headerlink" title="KMP的程序实现"></a>KMP的程序实现</h2><ol><li><p>next函数的实现，程序如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">   &#123;</span><br><span class="line">       static void Main(string[] args)</span><br><span class="line">       &#123;</span><br><span class="line">           //这是一个测试</span><br><span class="line">           int[] nextarray = Next(&quot;ababababca&quot;);</span><br><span class="line">           foreach (var item in nextarray)</span><br><span class="line">           &#123;</span><br><span class="line">               Console.Write(item + &quot; &quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           Console.Read();</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       public static int[] Next(string pattern_str)</span><br><span class="line">       &#123;</span><br><span class="line">           int len = pattern_str.Length;</span><br><span class="line">           int[] next = new int[len];</span><br><span class="line">           //next数组的第0,1位一定是零</span><br><span class="line">           next[0] = 0;</span><br><span class="line">           next[1] = 0;</span><br><span class="line">           for (int i = 2; i &lt; len; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               //P(i)新增的字符与P(i-1)最长前缀的后一位匹配时的情况</span><br><span class="line">               if (pattern_str[i - 1] == pattern_str[next[i - 1]])</span><br><span class="line">               &#123;</span><br><span class="line">                   next[i] = next[i - 1] + 1;</span><br><span class="line">               &#125;</span><br><span class="line">               else</span><br><span class="line">               &#123;</span><br><span class="line">                   //P(i)新增的字符与P(i-1)最长前缀的后一位不匹配时，寻找更小的前后缀，并继续比较p(i)新增字符与新的前缀的后一个字符是否相等，相等，计算next(i)；不等，继续寻找更小的前后缀。</span><br><span class="line">                   int j = next[i - 1];</span><br><span class="line">                   while (j &gt;= 0)</span><br><span class="line">                   &#123;</span><br><span class="line">                       j = next[j];</span><br><span class="line">                       if (pattern_str[j] == pattern_str[i - 1])</span><br><span class="line">                       &#123;</span><br><span class="line">                           next[i] = j + 1;</span><br><span class="line">                           break;</span><br><span class="line">                       &#125;</span><br><span class="line">                       else</span><br><span class="line">                       &#123;</span><br><span class="line">                           //若最小的前后缀都无法使其后一位与P(i)新增的字符相等，则说明P(i)不存在前后缀，next(i)=0.</span><br><span class="line">                           if (j==0)</span><br><span class="line">                           &#123;</span><br><span class="line">                               next[i] = 0;</span><br><span class="line">                               break;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">   </span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           return next;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行上面的程序，我们将得到下面的结果</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190712/DrQfHOficE1Y.png?imageslim" alt="mark"></p><p>我们可以看到输出结果与前面计算的一样，为保证算法的准确性，使用字符串”abaabaababb”再次进行验证，得到如下输出</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190712/pp539EgdHPRh.png?imageslim" alt="mark"></p><p>经验证，与计算结果一致，则程序基本无误。</p></li><li><p>KMP算法的整体实现</p><p>按照前面的算法分析，程序如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(KMP(&quot;abdadabdabadabdabbb&quot;, &quot;abdabb&quot;));</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">        public static int KMP(string main_str, string pattern_str)</span><br><span class="line">        &#123;</span><br><span class="line">        //初始化工作，获取主串、模式串长度；计算next数组，循环变量初始化，结果初始化（无匹配的返回值）</span><br><span class="line">            int main_len = main_str.Length;</span><br><span class="line">            int pattern_len = pattern_str.Length;</span><br><span class="line">            int j = 0;</span><br><span class="line">            int target = -1;</span><br><span class="line">            int[] next = Next(pattern_str);</span><br><span class="line">            int i = 0;</span><br><span class="line">            //主循环为主串下标的自增</span><br><span class="line">            while (i &lt; main_len)</span><br><span class="line">            &#123;</span><br><span class="line">            //判断主串字符和模式串字符是否相等</span><br><span class="line">                if (main_str[i] == pattern_str[j])</span><br><span class="line">                &#123;</span><br><span class="line">                //若模式串下标已经达到最大，匹配成功，退出循环</span><br><span class="line">                    if (j == pattern_len - 1)</span><br><span class="line">                    &#123;</span><br><span class="line">                    //此时的i为匹配成功末位的值，需要减去模式串的长度再加一才是匹配成功首位的位置</span><br><span class="line">                        target = i-pattern_len+1;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        j++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                //如果j=0并且进入这个else说明模式串首位与主串i处不匹配，主串序号需要加一，否则下一次循环j还是0，会陷入循环比较</span><br><span class="line">                    if (j == 0)</span><br><span class="line">                    &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //由next数组求得下一次j的值</span><br><span class="line">                    j = next[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return target;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//next数组的求解</span><br><span class="line">        public static int[] Next(string pattern_str)</span><br><span class="line">        &#123;</span><br><span class="line">            int pattern_len = pattern_str.Length;</span><br><span class="line">            int[] next = new int[pattern_len];</span><br><span class="line">            next[0] = 0;</span><br><span class="line">            next[1] = 0;</span><br><span class="line">            for (int i = 2; i &lt; pattern_len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (pattern_str[i - 1] == pattern_str[next[i - 1]])</span><br><span class="line">                &#123;</span><br><span class="line">                    next[i] = next[i - 1] + 1;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    int j = next[i - 1];</span><br><span class="line">                    while (j &gt;= 0)</span><br><span class="line">                    &#123;</span><br><span class="line">                        j = next[j];</span><br><span class="line">                        if (pattern_str[j] == pattern_str[i - 1])</span><br><span class="line">                        &#123;</span><br><span class="line">                            next[i] = j + 1;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else</span><br><span class="line">                        &#123;</span><br><span class="line">                            if (j == 0)</span><br><span class="line">                            &#123;</span><br><span class="line">                                next[i] = 0;</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们用给出的第一个例子来验证这个算法，得到结果为</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190712/6oTF1AG6rcsc.png?imageslim" alt="mark"></p></li></ol><p>经过验证，匹配成功的首位确为12处，程序无误。</p><h2 id="KMP算法分析"><a href="#KMP算法分析" class="headerlink" title="KMP算法分析"></a>KMP算法分析</h2><p>从程序的实现可以看出，算法可以分为两部分：next函数计算和匹配过程。其中，next函数的计算的时间复杂度为O(m<sup><a href="#fn_1" id="reffn_1">1</a></sup>)，并且可以证明next函数计算耗费不会超过2m；而匹配的过程显然时间复杂度为O(n<sup><a href="#fn_2" id="reffn_2">2</a></sup>)，并且可以证明匹配计算耗费不会超过2n。（具体证明限于篇幅，此处仅给出结论）</p><p>综上，KMP算法的时间复杂度为O(m+n)，是线性的，远小于暴力法的O((m-n)*n)</p><blockquote id="fn_1"><sup>1</sup>. m为模式串的长度<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2"><sup>2</sup>. n为主串的长度<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Improved Square Method</title>
      <link href="/2019/07/08/improved-square-method/"/>
      <url>/2019/07/08/improved-square-method/</url>
      
        <content type="html"><![CDATA[<h1 id="改进平方根法和追赶法"><a href="#改进平方根法和追赶法" class="headerlink" title="改进平方根法和追赶法"></a>改进平方根法和追赶法</h1><p>虽然平方根法的时间复杂度远远低于高斯消元法和lU分解，但是n个开方运算会耗费很多的时间，所以为了避免开放运算，需要对平方根法进行改进。</p><p>追赶法则是求解严格对角占优矩阵效率最高的算法之一。</p><a id="more"></a><h2 id="改进平方根法公式推导"><a href="#改进平方根法公式推导" class="headerlink" title="改进平方根法公式推导"></a>改进平方根法公式推导</h2><p>为了避免开方运算，我们使用$A=LDL^{T}$导出分解公式</p><script type="math/tex; mode=display">由\\A=LU=LDD^{-1}U=LDL^{T}\\可知L^{T}=D^{-1}U,因此\\l_{i,j}=\frac{u_{ij}}{d_{i}}=\frac{u_{ij}}{u_{ii}},\quad i=1,2,\dots,n-1;j=i+1,i+2,\dots,n\\由杜立特尔分解可知\\u_{ij}=a_{ij}-\sum_{k=1}^{i-1}l_{ik}u_{kj},\quad i=1,2,\dots,n;j=i,i+1,\dots,n\\\Rightarrow l_{ij}=\frac{a_{ij}-\sum_{k=1}^{i-1}l_{ik}u_{kj}}{u_{ii}},\quad i=1,2,\dots,n-1;j=i+1,i+2,\dots,n</script><p>用$A=LDL^{T}$分解求解方程组Ax=b就是改进平方根法，下面导出计算公式</p><script type="math/tex; mode=display">Ax=b \Rightarrow LDL^{T}\Rightarrow \left\{\begin{array}\Ly=b\\Dz=y\\L^{T}x=z\end{array}\right.\\由Ly=b可得\\y_{1}=b_{1}\\y_{i}=b_{i}-\sum_{k=1}^{i-1}l_{ik}y_{k},\quad i=2,3,\dots,n\\由Dz=y可得\\z_{i}=\frac{y_{i}}{u_{ii}},\quad i=1,2,\dots,n\\由L^{T}x=z可得\\\left\{\begin{array}\x_{n}=z_{n}\\x_{i}=z_{i}-\sum_{i+1}^{n}l_{ki}x_{k},\quad i=n-1,n-2,\dots,1\end{array}\right.\\将z_{i}和l_{ki}=\frac{u_{ik}}{u_{ii}}代入x_{i}的表达式，可得\\\left\{\begin{array}\x_{n}=\frac{y_{n}}{u_{nn}}\\x_{i}=\frac{y_{i}-\sum_{k=i+1}^{n}u_{ik}x_{k}}{u_{ii}},\quad i=n-1,n-2,\dots,2,1\end{array}\right.</script><h2 id="改进平方根法的算法分析"><a href="#改进平方根法的算法分析" class="headerlink" title="改进平方根法的算法分析"></a>改进平方根法的算法分析</h2><p>采用改进平方根法求解Ax=b共用了乘除法$\frac{1}{6}n^{3}+\frac{3}{2}n^{2}-\frac{2}{3}n$个，它比平方根法多了$\frac{1}{2}n^{2}-\frac{1}{2}n$个乘除法，但是少了n个开方运算，而相比于高斯消元法和杜立特尔分解几乎少了一半的乘除法，因此改进平方根法为求解对称正定方程组最有效的方法之一。实际上改进平方根法的分解公式和lU分解的分解公式是相同的，但是LU分解还要计算U矩阵，因此效率比较低，而改进平方根法则利用正定对称矩阵的特点，使得只需要计算L矩阵，大大减少了计算量，提高了效率。</p><h2 id="追赶法的分解公式"><a href="#追赶法的分解公式" class="headerlink" title="追赶法的分解公式"></a>追赶法的分解公式</h2><p>在样条插值、常微分方程边值问题和热传导方程的有限差分法等问题中，常遇到求解三对角方程组Ax=b,即</p><script type="math/tex; mode=display">\begin{pmatrix}b_{1}&c_{1}&\\a_{2}&b_{2}&c_{2}\\&\ddots&\ddots&\ddots\\&&a_{n-1}&b_{n-1}&c_{n-1}\\&&&a_{n}&b_{n}\end{pmatrix}\begin{pmatrix}x_{1}\\x_{2}\\\vdots\\x_{n-1}\\x_{n}\end{pmatrix}=\begin{pmatrix}d_{1}\\d_{2}\\\vdots\\d_{n-1}\\d_{n}\end{pmatrix}</script><p>通常A是严格对角占优矩阵，严格对角占优矩阵存在唯一 的杜立特分解，形式如下</p><script type="math/tex; mode=display">A=LU=\begin{pmatrix}1\\l_{2}&1\\&\ddots&\ddots\\&&l_{n-1}&1\\&&&l_{n}&1\end{pmatrix}\begin{pmatrix}u_{1}&c_{1}\\&u_{2}&c_{2}\\&&\ddots&\ddots\\&&&u_{n-1}&c_{n-1}\\&&&&u_{n}\end{pmatrix}</script><p>根据矩阵乘法，我们可以导出分解公式如下</p><script type="math/tex; mode=display">\left\{\begin{array}\u_{1}=b_{1}\\l_{i}=\frac{a_{i}}{u_{i-1}},\quad i=2,3,\dots,n\\u_{i}=b_{i}-l_{i}c_{i-1},\quad i=2,3,\dots,n\end{array}\right.</script><h2 id="追赶法求解Ax-d的计算公式"><a href="#追赶法求解Ax-d的计算公式" class="headerlink" title="追赶法求解Ax=d的计算公式"></a>追赶法求解Ax=d的计算公式</h2><script type="math/tex; mode=display">Ax=d \Rightarrow LUx=d\Rightarrow \\\left\{\begin{array}\Ly=d\\Ux=y\end{array}\right.\quad\\由Ly=d可得\\\left\{\begin{array}\y_{1}=d_{1}\\y_{i}=d_{i}-l_{i}y_{i-1},\quad i=2,3,\dots,n\end{array}\right.\quad\\由Ux=y可得\\\left\{\begin{array}\x_{n}=\frac{y_{n}}{u_{n}}\\x_{i}=\frac{y_{i}-c_{i}x_{i+1}}{u_{i}},\quad i=n-1,n-2,\dots,1\end{array}\right.</script><h2 id="追赶法的一个分解示例"><a href="#追赶法的一个分解示例" class="headerlink" title="追赶法的一个分解示例"></a>追赶法的一个分解示例</h2><script type="math/tex; mode=display">A=\begin{pmatrix}1&2&0&0&0\\2&3&1&0&0\\0&-3&4&2&0\\0&0&4&7&1\\0&0&0&-5&6\end{pmatrix}\\\quad\\</script><p>分解结果如下</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190709/vK2m6n98uhN6.png?imageslim" alt="mark"></p><h2 id="追赶法的算法分析"><a href="#追赶法的算法分析" class="headerlink" title="追赶法的算法分析"></a>追赶法的算法分析</h2><p>用追赶法来解线性方程的乘除法运算次数仅为5n-4,比高斯消元法的运算次数少得多。并且由于方程组的系数矩阵是严格对角占优的，因此能保证追赶法顺利进行，并且计算过程稳定。</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Numerical Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Square Root Method</title>
      <link href="/2019/07/06/square-root-method-and-improved-square-root-method/"/>
      <url>/2019/07/06/square-root-method-and-improved-square-root-method/</url>
      
        <content type="html"><![CDATA[<h1 id="平方根法"><a href="#平方根法" class="headerlink" title="平方根法"></a>平方根法</h1><p>在有限元法求解结构力学和最优化方法等诸多问题中，都需要求解一个系数矩阵是正定的线性方程组Ax=b。针对这种方程组的特点，采用平方根法更加有效。所谓平方根法是将系数矩阵分解为一个下三角形矩阵和该矩阵的转置的乘积，然后在此基础上求解方程。</p><a id="more"></a><h2 id="引理"><a href="#引理" class="headerlink" title="引理"></a>引理</h2><ol><li><p>若矩阵的各阶顺序主子式都不为零，则矩阵可以进行LU分解（1），且矩阵的LU分解唯一。现对（2）进行证明</p><script type="math/tex; mode=display">设  \quad\quad\quad\quad A=LU \quad\\且\quad\quad\quad\quad A=L_{1}U_{1}\\则  \quad\quad\quad\quad L_{1}^{-1}AU^{-1}=L_{1}^{-1}L \quad\quad\\\quad\quad\quad L_{1}^{-1}AU^{-1}=U_{1}U^{-1}\\即 \quad\quad\quad\quad\quad\quad\quad\quad L_{1}^{-1}L=U_{1}U^{-1}\\\quad\\因为 L_{1}^{-1}L为下单位三角矩阵，而U_{1}U^{-1}为上单位三角矩阵\\所以L_{1}^{-1}L=U_{1}U^{-1}=I</script></li><li><p>A为对称矩阵，当A的各阶顺序主子式都不等于零时，A可以唯一的分解为</p><p>​                                                $A=LDL^{T}$</p><p>现证明之</p><script type="math/tex; mode=display">根据引理（1），A=LU，记D=diag(d_{1},d_{2},d_{3},\dots,d_{n})=diag(u_{11},u_{22},\dots,u_{nn})\\则 \quad A=LU=LDD^{-1}U=LDM^{T},其中M^{T}=D^{-1}U\\又 \quad A=A^{T}=MDL^{T}\\因为M为下三角矩阵，而DL^{T}为上三角矩阵，所以MDL^{T}也是A的一个LU分解\\由LU分解的唯一性可得=>L=M\\所以 \quad A=MDL^{T}=LDL^{T}</script></li></ol><h2 id="平方根法重要定理"><a href="#平方根法重要定理" class="headerlink" title="平方根法重要定理"></a>平方根法重要定理</h2><p>   (对称正定矩阵的楚列斯基分解)设A是n阶对称正定矩阵，则存在一个可逆下三角矩阵G，使得</p><p>   ​                                    $A=GG^{T}$</p><p>   且当限定G的对角元为正时，这种分解是唯一的。</p><p>   证明：</p><script type="math/tex; mode=display">   由线性代数可知，正定矩阵的各阶顺序主子式都大于零，由上面的引理2可得\\   A=LDL^{T},且可证明D的对角元都大于零\\   \forall x\not=0 ,\quad 0<x^{T}Ax=x^{T}LDL^{T}x=(L^{T}x)^{T}D(L^{T}x)\\   当x取使L^{T}=e_{i}时，i=1,2,\dots,n\\   0<(L^{T}x)^{T}D(L^{T}x)=u_{ii}\\   现在记D^{\frac{1}{2}}=diag(\sqrt u_{11},\sqrt u_{22},\dots,\sqrt u_{nn})\\   则 \quad\quad A=LDL^{T}=LD^{\frac{1}{2}}D^{\frac{1}{2}}L^{T}=(LD^{\frac{1}{2}})(LD^{\frac{1}{2}})^{T}\\   其中G=LD^{\frac{1}{2}}为下三角矩阵，即\\   G\triangleq   \begin{pmatrix}   g_{11}\\   g_{21}&g_{22}\\   g_{31}&g_{32}&g_{33}\\   \vdots&\vdots&&\ddots\\   g_{n1}&g_{n2}&\dots&g_{n,n-1}&g_{nn}   \end{pmatrix}</script><h2 id="平方根法的计算公式"><a href="#平方根法的计算公式" class="headerlink" title="平方根法的计算公式"></a>平方根法的计算公式</h2><p>根据$A=GG^{\frac{1}{2}}$，由矩阵乘法得</p><script type="math/tex; mode=display">a_{ij}=\sum_{k=1}^{n}g_{ik}g_{jk}=\sum_{k=1}^{\min(i,j)}g_{ik}g_{jk}=\sum_{k=1}^{j}g_{ik}g_{jk}=\sum_{k=1}^{j-1}g_{ik}g_{jk}+g_{ij}g_{jj}\\\quad\\当i=j时，a_{jj}=\sum_{k=1}^{j-1}g_{jk}^{2}+g_{jj}^{2}\\\quad\\所以，\quad g_{jj}=(a_{jj}-\sum_{k=1}^{j-1}g_{jk}^{2})^{\frac{1}{2}},j=1,2,\dots,n\\\quad\\当j=1时，g_{11}=\sqrt {a_{11}}\\\quad\\当i>j时，\\g_{ij}=\frac{a_{jj}-\sum_{k=1}^{j-1}g_{ik}g_{jk}}{g_{jj}},j=1,2,\dots,n-1;i=j+1,j=2，\dots,n\\\quad\\当j=1时，g_{i1}=\frac{a_{i1}}{g_{11}}(i=2,3,\dots,n)\\\quad\\综上，可得分解公式\\\left\{\begin{array}\g_{11}=\sqrt {a_{11}}\\g_{i1}=\frac{a_{i1}}{g_{11}}    \quad\quad\quad\quad i=2,3,\dots,n\\g_{jj}=(a_{ij}-\sum_{k=1}^{j-1}g_{jk}^{2})^{\frac{1}{2}} \quad\quad\quad\quad j=2,3,\dots,n\\g_{ij}=\frac{a_{jj}-\sum_{k=1}^{j-1}g_{ik}g_{jk}}{g_{jj}} \quad\quad\quad\quad j=2,3,\dots,n-1;i=j+1,j+2,\dots,n\end{array}\right.</script><p>有分解公式可知</p><p>​                            $a_{jj}=\sum_{k=1}^jg_{jk}^{2} \Rightarrow \vert g_{jk} \vert  \le\sqrt {a_{jj}},j=1,2,\dots,n;k=1,2,\dots,j.$</p><p>由此可见，G的元素是可以控制的，舍入误差不会无限增长，这种分解是稳定的。</p><h2 id="平方根法的一个分解示例"><a href="#平方根法的一个分解示例" class="headerlink" title="平方根法的一个分解示例"></a>平方根法的一个分解示例</h2><script type="math/tex; mode=display">A=\begin{pmatrix}9&18&9&-27\\18&45&0&-45\\9&0&126&9&\\-27&-45&9&135\end{pmatrix}分解\Rightarrow\\</script><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190706/FPzljembBuYP.png?imageslim" alt="mark"></p><h2 id="使用平方根法求解方程"><a href="#使用平方根法求解方程" class="headerlink" title="使用平方根法求解方程"></a>使用平方根法求解方程</h2><p>由$A=GG^{T}$可得</p><script type="math/tex; mode=display">Ax=b\Rightarrow GG^{T}x=b\Rightarrow\\\left\{\begin{array}\Gy=b\Rightarrow解出y\\G^{T}x=y\Rightarrow解出x\end{array}\right.\\\quad\\由Gy=b可知\left\{\begin{array}\g_{11}y_{1}=b_{1}\\g_{i1}y_{1}+g_{i2}y_{2}+\dots+g_{ii}y_{i}=b_{i},i=2,3,\dots,n\end{array}\right.\\\quad\\综上\\\left\{\begin{array}\y_{1}=\frac{b_{1}}{g_{11}}\\y_{i}=\frac{b_{i}-\sum_{k=1}^{i-1}g_{ik}y_{k}}{g_{ii}},i=2,3,\dots,n\end{array}\right.\\\quad\\然后再从G^{T}x=y,解出x</script><h2 id="平方根法算法分析"><a href="#平方根法算法分析" class="headerlink" title="平方根法算法分析"></a>平方根法算法分析</h2><p>用平方根法求解Ax=b共需要$\frac{1}{6}n^{3}+n^{2}-\frac{1}{6}n$个乘除法和n个开方运算，相比于高斯消元法和lU分解法求解方程减少了近一半的运算量。但是n个开放运算需要耗费较多的机器时间。</p><h2 id="平方根法的程序实现"><a href="#平方根法的程序实现" class="headerlink" title="平方根法的程序实现"></a>平方根法的程序实现</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Square_Root_Method</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Matrix m = <span class="keyword">new</span> Matrix(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            m.CholeskyDecomposition();</span><br><span class="line">            m.DisPlay();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Matrix</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> column = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">float</span>[,] matrix;</span><br><span class="line">        <span class="comment">//矩阵的初始化（输入）</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Matrix</span>(<span class="params"><span class="keyword">int</span> row, <span class="keyword">int</span> column</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.row = row;</span><br><span class="line">            <span class="keyword">this</span>.column = column;</span><br><span class="line">            Console.WriteLine(<span class="string">$"Please enter a matrix with <span class="subst">&#123;<span class="keyword">this</span>.row&#125;</span>rows,<span class="subst">&#123;<span class="keyword">this</span>.column&#125;</span>colums"</span>);</span><br><span class="line">            matrix = <span class="keyword">new</span> <span class="keyword">float</span>[row, column];</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">string</span> mid = Console.ReadLine();</span><br><span class="line">                        <span class="keyword">var</span> rows = mid.Split(<span class="string">' '</span>);</span><br><span class="line">                        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> rows)</span><br><span class="line">                        &#123;</span><br><span class="line">                            matrix[i, j++] = <span class="keyword">float</span>.Parse(item);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(<span class="string">"\r\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$"something wrong!\n<span class="subst">&#123;e.Message&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出矩阵</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisPlay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.row; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.column; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(matrix[i, j] + <span class="string">"   "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(<span class="string">"\r"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//矩阵的Cholesky分解</span></span><br><span class="line">        <span class="comment">//我们把结果保存在原矩阵的下三角中</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CholeskyDecomposition</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//计算第一个元素</span></span><br><span class="line">            matrix[<span class="number">0</span>, <span class="number">0</span>] = (<span class="keyword">float</span>)Math.Sqrt(matrix[<span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line">            <span class="comment">//计算第一列元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.row; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                matrix[i, <span class="number">0</span>] = matrix[i, <span class="number">0</span>] / matrix[<span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.row; i++)</span><br><span class="line">            &#123;</span><br><span class="line"><span class="comment">//计算第i,j（i!=j）个元素</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    matrix[i, j] = (matrix[i, j] - TempValue(i, j)) / matrix[j, j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//计算第j,j个元素，也可以放到上面的循环中去，并加判断</span></span><br><span class="line">                <span class="comment">//注意这一行代码不能放到上面的for之前（与LU分解不同），这是算法决定的</span></span><br><span class="line">                matrix[i, i] = (<span class="keyword">float</span>)Math.Sqrt(matrix[i, i] - TempValue(i, i));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用于计算中间值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">TempValue</span>(<span class="params"><span class="keyword">int</span> i, <span class="keyword">int</span> j</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">float</span> result = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                result += matrix[i, k] * matrix[j, k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码，输入上面示例中的矩阵，我们将得到如下结果：</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190706/TSd9nlcRg2DF.png?imageslim" alt="mark"></p><p>经验证，与上面计算结果相同</p>]]></content>
      
      
      <categories>
          
          <category> Numerical Method </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Basic Skills</title>
      <link href="/2019/07/05/HTML%20Basic%20Skills/"/>
      <url>/2019/07/05/HTML%20Basic%20Skills/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-HyperText-Markup-Language-、CSS和Javascript"><a href="#HTML-HyperText-Markup-Language-、CSS和Javascript" class="headerlink" title="HTML(HyperText Markup Language)、CSS和Javascript"></a>HTML(HyperText Markup Language)、CSS和Javascript</h1><p>​    对于一个网页而言，主要由    HTML、CSS和Javascript组成。其中HTML主要负责网页框架的搭建，CSS主要负责网页的样式而JavaScript主要负责网页的行为。</p><a id="more"></a><h2 id="常用的HTML标签"><a href="#常用的HTML标签" class="headerlink" title="常用的HTML标签"></a>常用的HTML标签</h2><ol><li><p><code>&lt;html&gt;&lt;/html&gt;</code></p><p> 这个标签没什么用，但是所有HTML标签都需要写在这个标签内部</p></li><li><p><code>&lt;head&gt;&lt;/head&gt;</code></p><p>head标签是用来写一些给浏览器看的内容，包括网站名，网站描述等</p><h4 id="head内部常用的标签"><a href="#head内部常用的标签" class="headerlink" title="head内部常用的标签"></a>head内部常用的标签</h4><ul><li><p>meta标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset="utf-8"&gt;  &lt;!--申明网页的编码格式--&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--utf-8</span>为编码字符集<span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;meta name="keywords" content="xx"&gt;&lt;!--描述网页的类别，给网络爬虫看的信息--&gt;</span><br><span class="line">&lt;meta name="description" content="xx"&gt;&lt;!--对网页的描述，也是给爬虫看的信息--&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code> 常用的字符编码有： - gb2312(包括亚裔字符集) - gbk(在gb2312基础上增加了繁体中文) - unicode(万国码)title标签</code></pre><ul><li><p>title标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;    这里可以写标题（浏览器上方显示的）&lt;/title&gt;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>body标签</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">body</span>&gt; </span><br><span class="line">这里是网页的主体</span><br><span class="line">&lt;/<span class="keyword">body</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="body内常用的标签"><a href="#body内常用的标签" class="headerlink" title="body内常用的标签"></a>body内常用的标签</h4></li></ol><ul><li><p>p标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">这是一个段落，常用来换行</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>h标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这也是一个标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--最多到h5--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>strong标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>em标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>del标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>中划线，效果参考打折的价格<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>div标签</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span>&gt;只是一个容器，无具体功能，有利于模块化和绑定操作&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>sapn标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这也是一个容器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>a标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>这是超链接锚点，最初的作用为<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--target的值决定是在当前页面打开链接还是在新的页面中打开页面--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--herf的值除了URL还可以是tel(打电话)和mailto(发邮件),还可以是JavaScript（协议限定符，此标识后可写java代码，用户点击时会强行运行）--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>br标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>换行<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>hr标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>这是水平线<span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ol和li标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"a"</span> <span class="attr">start</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">1--value的值决定最开始的序号值--</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--type的值不同，列表的样式不同,1&gt;=序号为阿拉伯数字;I/i&gt;=序号为小写/大写罗马数字;A/a=&gt;序号为大小写英文字母--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>这是一个有序列表，ol和li是一起使用的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>樱桃<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ul和li标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"disc"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--type的值决定无序列表的样式，具体不做叙述--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>这是无序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>圆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>正方形<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>三角形<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>矩形<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注：ui和li常用来做导航栏，菜单栏等功能和形式差不多，天生具有父子结构的对象</code></p></li><li><p>img标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图片的相对地址或绝对地址"</span> <span class="attr">alt</span>=<span class="string">"图片的摘要"</span> <span class="attr">title</span>=<span class="string">"图片的描述"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当网页文件和图片处于同一个文件夹下时，可以使用相对地址，更加简单；否则使用绝对地址才能正常加载图片--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Alt的值是当图片无法正常加载时显示 在图片上的信息，用来改善用户体验--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--title的值是用户的鼠标放在图片上时会显示的信息--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>form标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get/post"</span> <span class="attr">action</span>=<span class="string">"发送信息的地址"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="comment">&lt;!--这文本输入框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="comment">&lt;!--这密码框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="comment">&lt;!--这是提交按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"xx"</span>&gt;</span><span class="comment">&lt;!--这是当选框,只有当数个单选框的name值相同时，才会发挥单选的功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"xx"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"xx"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span><span class="comment">&lt;!--这是复选框,只有当数个复选框的name值相同时，才会正常发挥复选的功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="comment">&lt;!--这是一个下拉框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--想要正确提交信息，必须要有name和value--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>复</span><br></pre></td></tr></table></figure></li></ul><h2 id="标签的归类"><a href="#标签的归类" class="headerlink" title="标签的归类"></a>标签的归类</h2><ol><li><p>行级元素</p><p>feature：</p><ul><li>内容决定元素所占位置</li><li>不可以通过css改变宽高</li></ul><p>常见的有：</p><ul><li>span</li><li>strong</li><li>em</li><li>a</li><li>del</li></ul></li><li><p>块级元素</p><p>feature：</p><ul><li>独占一行</li><li>可以通过css代码改变宽高</li></ul><p>常见的有：</p><ul><li>div</li><li>p</li><li>ul</li><li>li</li><li>ol</li><li>form</li><li>address</li></ul></li><li><p>行级块元素</p><p>feature:</p><ul><li>内容决定大小</li><li>可以通过css改宽高</li></ul></li></ol><p>标签类型的实质：</p><p>都是css特性的表现——对象都有一个display的css属性，display有三个属性值=&gt;</p><ol><li>inline  (行级)</li><li>2.block  (块级)</li><li>3.inline-block  (行级块元素)</li></ol><p>所以标签的类型不是固定的，可以通过css代码来更改；此外，所有属性为inline的对象都具有文字特性，即空格会被视为文本分隔符即如果inline对象之间有空格/空行就会间隔一定距离。</p><h2 id="HTML补充"><a href="#HTML补充" class="headerlink" title="HTML补充"></a>HTML补充</h2><ol><li>HTML语言中没有空格标签，所有空格都是文本分隔符，如果想要输入空格需输入&amp;nbsp，此外，其它特殊字符还有</li></ol><ul><li><code>&lt;     &amp;lt</code></li><li><code>&gt;     &amp;gt</code></li></ul><ol><li>HTML标签是可以嵌套的，通过嵌套可以实现各种不同的功能。</li><li>html还有很多复杂的标签，但是基本上很少用，因为网络编程要求结构和样式和行为相分离，那些复杂的标签多为带有样式的标签。</li></ol><h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><h4 id="CSS代码引入的方式"><a href="#CSS代码引入的方式" class="headerlink" title="CSS代码引入的方式"></a>CSS代码引入的方式</h4><ol><li><p>行间样式（内联），如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;div</span> <span class="string">style="</span></span><br><span class="line"><span class="attr">width:</span> <span class="number">100</span><span class="string">px;</span></span><br><span class="line"><span class="attr">height:</span> <span class="number">100</span><span class="string">px;</span></span><br><span class="line"><span class="attr">background-color:</span> <span class="comment">#f40"</span></span><br><span class="line"><span class="string">&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>页面级CSS，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">div&#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#f40</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外部CSS文件（最常用），如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid black;<span class="attribute">text-align</span>: right;</span><br><span class="line"><span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line"><span class="attribute">cursor</span>: ;</span><br><span class="line"><span class="attribute">text-decoration</span>: line-through;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，外部CSS文件要能作用到HTML文件上，需要在HTML文件的head中加入如下代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">type</span>=<span class="string">"text/css"</span> <span class="attribute">href</span>=<span class="string">"CSS文件地址"</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="浏览器的策略"><a href="#浏览器的策略" class="headerlink" title="浏览器的策略"></a>浏览器的策略</h4><ol><li>浏览器从服务器下载HTML文件时，采取下载一行执行一行的形式</li><li>当执行到link CSS的代码时，浏览器会开启一个新的线程来同时下载CSS和HTML文件</li><li>在执行复杂选择器时，浏览器采用从右向左的方式，可以提高搜索的效率</li></ol><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><ol><li><p>Id选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#only</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ff3058</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*首先要求对象具有ID，ID是一对一唯一的标识，其中only为ID值*/</span></span><br></pre></td></tr></table></figure></li><li><p>class选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.typeone</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#345564</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*对象应具有class，且class不唯一，其中typeone为class值*/</span></span><br></pre></td></tr></table></figure></li><li><p>标签选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#634432</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*标签选择器会选中所有该类标签*/</span></span><br></pre></td></tr></table></figure></li><li><p>通配符选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#243543</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*此选择器会作用到全局*/</span></span><br></pre></td></tr></table></figure></li><li><p>属性选择器，如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[id]</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f84</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*也可以指定属性值*/</span></span><br><span class="line"><span class="selector-attr">[id="only"]</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f84</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>！important</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#only</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ff3058</span><span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*加上！important后，此选择器优先级最高*/</span></span><br></pre></td></tr></table></figure></li><li><p>父子选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#567889</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#demo1</span> <span class="selector-class">.typeone</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#678980</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*可以用来限定目标，可以套很多层，且形式不一定要一样*/</span></span><br></pre></td></tr></table></figure></li><li><p>直接子元素选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#779</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*只会作用于字节的子类*/</span></span><br></pre></td></tr></table></figure></li><li><p>并列选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.demo1</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#655</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*可以用多个选择器不加空格的组合到一起，可涮选出符合所有条件的对象*/</span></span><br></pre></td></tr></table></figure></li><li><p>分组选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">em</span><span class="selector-class">.demo1</span>,</span><br><span class="line"><span class="selector-tag">strong</span> <span class="selector-id">#only</span>,</span><br><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#658</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*可以实现代码的复用，把具有同样样式的选择器用逗号隔开，则可作用于所有对象*/</span></span><br></pre></td></tr></table></figure></li><li><p>伪类选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*当鼠标移动到对象的领域之内时，为对象加上相应的样式，当鼠标移开后，则会移除相应的样式*/</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="CSS选择器的优先级和权值"><a href="#CSS选择器的优先级和权值" class="headerlink" title="CSS选择器的优先级和权值"></a>CSS选择器的优先级和权值</h4><ul><li>优先级          ！important&gt;行间样式&gt;ID&gt;class|属性&gt;标签选择器&gt;*</li><li><p>CSS选择器的权值</p><ul><li>！important            infinity </li><li>行间样式                   1000</li><li>ID                               100</li><li>class|属性|伪类        10</li><li>标签|伪元素                1</li><li>通配符                          0</li></ul></li><li><p>CSS权重用于选择器优先级的比较，多重选择器嵌套可以将权重相加，<code>且权重的值不为十进制而是256进制！！！</code></p></li></ul><h4 id="CSS代码常用属性"><a href="#CSS代码常用属性" class="headerlink" title="CSS代码常用属性"></a>CSS代码常用属性</h4><div class="table-container"><table><thead><tr><th>font-size: 50px;</th><th>设置字体的大小（实际设置字体的高）</th></tr></thead><tbody><tr><td>font-weight: bold;</td><td>设置字体的粗细</td></tr><tr><td>font-style: italic;</td><td>斜体</td></tr><tr><td>font-family: arial;</td><td>设置字体样式</td></tr><tr><td>color: #424;</td><td>设置字体颜色</td></tr><tr><td>border: 1px solid black;</td><td>设置外边框的粗细、样式（直线，虚线等）和颜色</td></tr><tr><td>width: 100px;</td><td>设置宽</td></tr><tr><td>height: 100px;</td><td>设置高</td></tr><tr><td>text-align: right;</td><td>设置文本对齐方式（左对齐，右对齐，居中）</td></tr><tr><td>line-height: 20px;</td><td>单行字体行高，用以控制行间距</td></tr><tr><td>text-indent: 2em;</td><td>设置缩进，单位是em（当前每个字体的像素大小）</td></tr><tr><td>text-decoration: line-through;</td><td>对字体进行装饰，值不同样式不同（下划线，中划线，上划线等）</td></tr><tr><td>cursor: pointer;</td><td>设置鼠标聚焦时鼠标样式的变化</td></tr></tbody></table></div><h4 id="字体颜色的三种形式"><a href="#字体颜色的三种形式" class="headerlink" title="字体颜色的三种形式"></a>字体颜色的三种形式</h4><ol><li><p>纯英文单词</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">color</span>: <span class="built_in">green</span>;</span><br><span class="line"><span class="built_in">color</span>: <span class="built_in">blue</span>;</span><br></pre></td></tr></table></figure></li><li><p>颜色代码</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="number">#ff4400</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#768798</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ff3</span>;</span><br></pre></td></tr></table></figure></li><li><p>颜色函数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: rgb(<span class="number">3</span>,<span class="number">35</span>,<span class="number">234</span>);</span><br><span class="line"><span class="attribute">color</span>: rgb(<span class="number">32</span>,<span class="number">43</span>,<span class="number">255</span>);</span><br></pre></td></tr></table></figure><p><code>注：颜色代码是由光学三原色混合而成的（r[00-ff];g[00-ff];b[]00-ff）,所以需要六位的值来确定颜色，但是如果每两位都是一样的，则可以进行简写，即每两位并成一位；而颜色函数也是由光学三颜色合成的，但是只需要三个参数，每一位的范围是0-255.实际上颜色代码和颜色函数是等价的，只是颜色函数只是把两位十六进制数组成256进制位。</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>https protocol</title>
      <link href="/2019/07/04/https-protocol/"/>
      <url>/2019/07/04/https-protocol/</url>
      
        <content type="html"><![CDATA[<h1 id="https协议详析"><a href="#https协议详析" class="headerlink" title="https协议详析"></a>https协议详析</h1><p>当我们使用浏览器时可能会发现我们输入的网站有以http和以https开头的，它们的区别在于哪里呢？实际上，可以说https是http的升级版，是对其安全性的加强。</p><a id="more"></a><h2 id="浏览器的一般工作流程"><a href="#浏览器的一般工作流程" class="headerlink" title="浏览器的一般工作流程"></a>浏览器的一般工作流程</h2><ol><li>当用户输入要访问的URL后，浏览器会根据URL解析出其域名</li><li>通过DNS服务器查询出域名映射的IP地址</li><li>根据查询到的IP地址与web服务器建立通讯</li></ol><p>上述过程可以抽象为下图</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190704/GfV08GYBcmg2.png?imageslim" alt="mark"></p><h2 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h2><p>http协议是构建在TCP/IP协议的基础上的，所以我们有必要了解Tcp/Ip相关的知识。</p><h4 id="TCP-IP协议的分层模型"><a href="#TCP-IP协议的分层模型" class="headerlink" title="TCP/IP协议的分层模型"></a>TCP/IP协议的分层模型</h4><p>TCP/IP协议是由四层协议组成的系统，这四层分别为：应用层、传输层、网络层、链路层，如下图所示</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190704/Hh41MJiuhBnS.png?imageslim" alt="mark"></p><ol><li><p>应用层</p><p>应用层是我们编写的应用程序，它决定了向用户提供的应用服务。应用层可通过系统调用与传输层通讯。</p><p>处于应用层的协议非常多，比如：FTP(File Transfer Protocol，文件传输协议)、DNS(Domain Name System,域名系统)以及HTTP(HyperText Transfer Protocol,超文本传输协议)等。</p></li><li><p>传输层</p><p>传输层通过系统调用向应用层提供两台计算机之间的数据传输功能。</p><p>在传输层有两个性质不同的协议：TCP(Transmission Control Protocol,传输控制协议)和UDP(User Data Protocol,用户数据协议)。其中TCP在数据传输的安全性上高于UDP，但是其传输速度比较慢，所以一般快速下载软件都是用UDP,比如迅雷。</p></li><li><p>网络层</p><p>网络层用来处理网络上流动的数据包，归顶数据包的传输路径。</p></li><li><p>链路层</p><p>链路层是用来处理连接网络的硬件部分，包括操作系统、硬件设备驱动、NIC(Network Interface Card,网络适配器)以及光纤等硬件。</p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>TCP协议是全双工的字节流传输，具有可靠性高的特点，为了确保其可靠性，TCP协议采用了”三次握手“的策略，如下图</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190704/czpzDig9RaME.png?imageslim" alt="mark"></p></li></ol><p>在图中，我们可以看到：</p><ol><li>首先客户端会向服务器发送一个带有SYN标志的连接请求</li><li>服务器接收到请求会作出应答，如果能接受连接，这服务器发送ACK进行确认，并且还会发送自己的SYN请求</li><li>客户端接受到SYN和ACK后，在向服务器发送ACK确认接受连接</li><li>三次握手完毕后会在客户端和服务器之间建立双向通信</li><li>为了维持TCP协议，在数据传输的过程中，接收端在接收端数据后都要给发送端发送ACK进行确认。若发送端在一定时间内没有接受到ACK确认，则会重发丢失的数据包</li></ol><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>HTTP协议（Hyper Text Transfer Protocol，超文本传输协议）,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p><p>HTTP基于TCP/IP通信协议来传递数据。</p><p>HTTP基于客户端/服务端（C/S）架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>（1）HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p><p>（2）HTTP是媒体独立的：只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</p><p>（3）HTTP是无状态：无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p><h2 id="HTTP协议的不足"><a href="#HTTP协议的不足" class="headerlink" title="HTTP协议的不足"></a>HTTP协议的不足</h2><ol><li>HTTP协议采用明文通讯，内容很有可能被窃听</li><li>无法验证对方身份，任何第三方可以通过伪装与服务器通讯</li><li>无法确定数据的可靠性，在传输中可能会被篡改</li></ol><h2 id="HTTPs协议"><a href="#HTTPs协议" class="headerlink" title="HTTPs协议"></a>HTTPs协议</h2><p>为了解决HTTP存在的问题，HTTPs应运而生，HTTPs采用SSL/TLS协议对传输的数据进行加密，保证了传输不被窃听；同时通过CA(由第三方权威机构颁发)证书验证通信双方的身份。</p><h4 id="有关CA证书"><a href="#有关CA证书" class="headerlink" title="有关CA证书"></a>有关CA证书</h4><p>CA证书是公司向权威机构申请，由权威机构颁发的。CA证书会被安装到服务器上，其中内容包括：</p><ol><li>持有者姓名</li><li>发证机关</li><li>有效日期</li><li>证件持有人的公钥</li><li>扩展信息</li><li>发证机关对该证书的数字签名（=前5点信息的MD5摘要，然后用CA的私钥加密）</li></ol><h4 id="HTTPs的通信原理"><a href="#HTTPs的通信原理" class="headerlink" title="HTTPs的通信原理"></a>HTTPs的通信原理</h4><ol><li><p>客户端信任发证机关的证书，一般用户不需要操作。因为CA（权威）[下面简称为CAA]证书存储在浏览器中，而浏览器一般自动信任了大多数的权威机构证书。</p></li><li><p>在请求建立的过程中，首先客户端会向服务器发送一次请求，服务器向客户端返回一个CA（公司服务器）证书[后简称CAS]</p></li><li>客户端根据得到的CAS证书读得发证机关的信息，找到内置的对于机关的CAA证书，从证书中找到机关的加密公钥，用公钥（解密钥）对得到的CAS证书的第六点信息进行解密，如果解得的信息与CAS证书前五点摘要的MD5相同，则说明服务器的CAS证书确为该机构颁布的，进而证明了服务器的身份</li><li>客户端再用CAS中得到的服务器的公钥（加密钥）加密一个信息比如“123”发送给服务器，服务器则根据其持有的私钥（解密钥）对信息进行解密，然后服务器把解密结果返回给客户端，若解密得到的信息与发送信息一致，则可证明该服务器就是客户端要访问的服务器。这样可防止因域名写错而造成的错误访问。</li><li>然后客户端会向服务器发送一条信息用以约定通信过程中的对称加密钥，然后即可在双方之间建立通信，以后的通信中发送端会用该对称加密钥对传输数据进行加密，而接收端也用该对称秘钥进行解密。这样就可以防止信息被窃听。</li></ol><p>通信流程图如下</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190704/lcNKdrDAa8WQ.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Usage of Trigonometric Decomposition</title>
      <link href="/2019/07/03/usage-of-trigonometric-decomposition/"/>
      <url>/2019/07/03/usage-of-trigonometric-decomposition/</url>
      
        <content type="html"><![CDATA[<h1 id="三角分解解线性方程组"><a href="#三角分解解线性方程组" class="headerlink" title="三角分解解线性方程组"></a>三角分解解线性方程组</h1><p>相比于高斯消元法，应用三角分解来解线性方程组在某些情况下能提高计算的效率。</p><a id="more"></a><h3 id="三角分解解线性方程的公式推导"><a href="#三角分解解线性方程的公式推导" class="headerlink" title="三角分解解线性方程的公式推导"></a>三角分解解线性方程的公式推导</h3><p>即，我们要解 LUx=b, 我们把这个方程拆为两个方程来解</p><script type="math/tex; mode=display">\left\{\begin{array}\Ly=b\\Ux=y\end{array}\right.</script><p>解方程组Ly=b的第一个方程为$y_{1}=b_{1}$，而第i个方程为</p><script type="math/tex; mode=display">\sum_{j=1}^{i-1}(l_{ij}y_{ij}+y_{i}=b_{i})\Longrightarrow\\\left\{\begin{array}\y_{1}=b_{1},\\y_{i}=b_{i}-\sum_{j=1}^{i-1}l_{ij}y_{j},\quad i=1,2,3,\dots,n\end{array}\right.</script><p>将解得的y代入Ux=y，由高斯消元法回代公式可得</p><script type="math/tex; mode=display">\left\{\begin{array}\x_{n}=\frac{y_{n}}{u_{nn}},\\x_{i}=\frac{y_{i}-\sum_{j=i+1}^{n}u_{ij}x_{j}}{u_{ii}},\quad i=n-1,n-2,\dots,2,1\end{array}\right.</script><hr><h3 id="一个LU分解的例子"><a href="#一个LU分解的例子" class="headerlink" title="一个LU分解的例子"></a>一个LU分解的例子</h3><script type="math/tex; mode=display">A=\begin{pmatrix}9&18&9&-27\\18&45&0&-45\\9&0&126&9\\-27&-45&9&135\end{pmatrix}\quad\quad\quad\quad\quad\quad b=\begin{pmatrix}1\\2\\16\\8\end{pmatrix}</script><p>现在对A进行分解</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190703/Vn9k4APAIbny.png?imageslim" alt="mark"></p><p>即可得</p><script type="math/tex; mode=display">L=\begin{pmatrix}1&\\2&1&\\1&-2&1\\-3&1&\frac{2}{3}&1\end{pmatrix}\quad\quad U=\begin{pmatrix}9&18&9&-27\\0&9&-18&9\\0&0&81&54\\0&0&0&9\end{pmatrix}\\\quad\\\quad\\y=\begin{pmatrix}1\\0\\15\\1\end{pmatrix}</script><h3 id="LU分解解线性方程组的算法分析"><a href="#LU分解解线性方程组的算法分析" class="headerlink" title="LU分解解线性方程组的算法分析"></a>LU分解解线性方程组的算法分析</h3><p>由矩阵LU分解公式可知，计算$u_{ij}$和$l_{ij}$各有</p><p>​                                                              $\sum_{j=2}^{n-1}(j(n-j)+n-1=\sum_{1}^{n-1}j(n-j)=1/6n^{3}-1/6n$</p><p>个乘除法，所以矩阵分解共有$1/3n^3-1/3n$个乘除法，而求解下三角方程Ly=b有$1/2n(n-1)$个乘除法，求解上三角方程Ux=y有$1/2n(n-1)+n$个乘除法，综上，用LU分解来解线性方程组共有$\frac{1}{3}n^{2}+n^{2}-\frac{1}{3}n$个乘除法，与高斯消元法的运算次数一样。</p><p>但是从LU分解的形式上看，不难发现如果我们要解一系列系数矩阵相同但右端不同的方程组时，LU分解可以大大减少计算量。</p><h3 id="编程实现LU分解"><a href="#编程实现LU分解" class="headerlink" title="编程实现LU分解"></a>编程实现LU分解</h3><ol><li>程序如下</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Trigonometric_Decomposition</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">           Matrix m= <span class="keyword">new</span> Matrix(<span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line">            m.LuDecomposition();</span><br><span class="line">            m.DisPlay();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Matrix</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">int</span> column = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">float</span>[,] matrix;</span><br><span class="line">            \\矩阵的输入</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Matrix</span>(<span class="params"><span class="keyword">int</span> row, <span class="keyword">int</span> column</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">this</span>.row = row;</span><br><span class="line">                <span class="keyword">this</span>.column = column;</span><br><span class="line">                Console.WriteLine(<span class="string">$"Please enter a matrix with <span class="subst">&#123;<span class="keyword">this</span>.row&#125;</span>rows,<span class="subst">&#123;<span class="keyword">this</span>.column&#125;</span>colums"</span>);</span><br><span class="line">                matrix = <span class="keyword">new</span> <span class="keyword">float</span>[row, column];</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">string</span> mid = Console.ReadLine();</span><br><span class="line">                            <span class="keyword">var</span> rows = mid.Split(<span class="string">' '</span>);</span><br><span class="line">                            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> rows)</span><br><span class="line">                            &#123;</span><br><span class="line">                                matrix[i, j++] = <span class="keyword">float</span>.Parse(item);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    Console.WriteLine(<span class="string">"\r\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">$"something wrong!\n<span class="subst">&#123;e.Message&#125;</span>"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            \\输出矩阵</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisPlay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.row; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.column; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.Write(matrix[i, j] + <span class="string">"   "</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Console.WriteLine(<span class="string">"\r"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            \\矩阵的LU分解</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LuDecomposition</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">            <span class="comment">//初始化第一行、第一列</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.column; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    matrix[i, <span class="number">0</span>] = matrix[i,<span class="number">0</span>] / matrix[<span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.row; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="comment">//先计算对角元，避免重复计算（放在第二个循环内会计算两次）</span></span><br><span class="line">                    matrix[i, i] = matrix[i, i] - FigureTemp(i, i, i );</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; <span class="keyword">this</span>.column; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="comment">//第i行i列的更新</span></span><br><span class="line">                        matrix[i, j] = matrix[i, j] - FigureTemp(i, j, i);</span><br><span class="line">                        matrix[j, i] = (matrix[j, i] - FigureTemp(i, j, i))/matrix[i,i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">FigureTemp</span>(<span class="params"><span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">            <span class="comment">//用于计算求和中间量</span></span><br><span class="line">                <span class="keyword">float</span> result = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; k; s++)</span><br><span class="line">                &#123;</span><br><span class="line">                    result += matrix[i, s] * matrix[s, j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>程序的验证</li></ol><p>当我们输入矩阵</p><script type="math/tex; mode=display">A=\begin{pmatrix}9&18&9&-27\\18&45&0&-45\\9&0&126&9\\-27&-45&9&135\end{pmatrix}</script><p>将得到输出如下</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190703/1k03XAqLqCjq.png?imageslim" alt="mark"></p><p>经对比，与上面计算的一致，程序无误。</p>]]></content>
      
      
      <categories>
          
          <category> Numerical Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Triangular Decomposition</title>
      <link href="/2019/07/02/triangular-decomposition/"/>
      <url>/2019/07/02/triangular-decomposition/</url>
      
        <content type="html"><![CDATA[<h1 id="矩阵的LU分解"><a href="#矩阵的LU分解" class="headerlink" title="矩阵的LU分解"></a>矩阵的LU分解</h1><p><code>矩阵的分解在矩阵的研究中有着极其重要的地位，而LU分解则是矩阵分析中一种常见而又重要的分解.</code></p><a id="more"></a><h2 id="LU分解——从高斯消元法说起"><a href="#LU分解——从高斯消元法说起" class="headerlink" title="LU分解——从高斯消元法说起"></a>LU分解——从高斯消元法说起</h2><h4 id="LU分解的来龙去脉"><a href="#LU分解的来龙去脉" class="headerlink" title="LU分解的来龙去脉"></a>LU分解的来龙去脉</h4><p>在高斯消元法中，我们使用了多次倍加把主对角元以外的元素变为零，这个过程可以看成是用一系列的初等矩阵来左乘系数矩阵。</p><script type="math/tex; mode=display">A^{(0)}=A \quad\quad\quadA^{(1)}\triangleq\begin{pmatrix}a_{11}^{(0)}&a_{12}^{(0)}&\dots&a_{1n}^{(0)}\\0&a_{22}^{(1)}&\dots&a_{2n}^{(1)}\\\vdots&\vdots&&\vdots\\0&a_{n2}^{(1)}&\dots&a_{nn}^{(1)}\end{pmatrix}\quad\quad\quad\\\quad\\L_{1}\triangleq\begin{pmatrix}1&&&&\\-l_{12}&1\\-l_{13}&&1&&\\\vdots&&&\ddots\\-l_{1n}&&&&1\end{pmatrix}</script><p>则有$A^{(1)}=L_{1}A^{(0)}$,同理有</p><script type="math/tex; mode=display">A^{(2)}\triangleq\begin{pmatrix}a_{11}^{(0)}&a_{12}^{(0)}&a_{}13^{(0)}&\dots&a_{1n}^{(0)}\\0&a_{22}^{(1)}&a_{23}^{(1)}&\dots&a_{2n}^{(1)}\\0&0&a_{33}^{(2)}&\cdots&a_{3n}^{(2)}\\\vdots&\vdots&\vdots&&\vdots\\0&0&a_{n3}^{(2)}&\dots&a_{nn}^{(1)}\end{pmatrix}\quad\quad\quad\\\quad\\\quad\\L_{2}\triangleq\begin{pmatrix}1&&&&\\&1\\&-l_{32}&1\\&-l_{42}&&1&&\\&\vdots&&&\ddots\\&-l_{n2}&&&&1\end{pmatrix}\\A^{(2)}=L_{2}A^{(1)}</script><p>一般的，有</p><script type="math/tex; mode=display">A^{(k-1)}\triangleq\begin{pmatrix}a_{11}^{(0)}&a_{12}^{(0)}&&\dots &\dots&a_{1n}^{(0)}\\&a_{22}^{(1)}&&\dots&\dots&a_{2n}^{(1)}\\&&\ddots&&&\vdots\\&&&a_{kk}^{(k-1)}&\dots&a_{kn}^{(k-1)}\\&&&\vdots&\dots&\vdots\\&&&a_{nk}^{(k-1)}&\dots&a_{nn}^{(k-1)}\end{pmatrix}\quad\quad\quad\\\quad\\\quad\\L_{2}\triangleq\begin{pmatrix}1&&&&\\&\ddots\\&&1\\&&-a_{k+1,k}&1\\&&-l_{k+2,k}&&1&&\\&&\vdots&&&\ddots\\&&-l_{nk}&&&&1\end{pmatrix}\\\quad\\\quad\\\quad\\A^{(k)}\triangleqA^{(k-1)}\triangleq\begin{pmatrix}a_{11}^{(0)}&a_{12}^{(0)}&&\dots&a_{1,k+1}^{(0)} &\dots&a_{1n}^{(0)}\\&a_{22}^{(1)}&&\dots&a_{2,k+1}^{(1)} &\dots&a_{2n}^{(1)}\\&&\ddots&&\vdots&&\vdots\\&&&a_{kk}^{(k-1)}&a_{k,k+1}^{(k-1)} &\dots&a_{kn}^{(k-1)}\\&&&&a_{k+1,k+1}^{k}&\dots&a_{k+1,n}^{(k)}\\&&&&\vdots&&\vdots\\&&&&a_{n,k+1}^{(k)}&\dots&a_{nn}^{(k)}\end{pmatrix}\quad\quad\quadA^{(k)}=L_{k}A^{(k-1)}=\dots=L_{k}L_{k-1}\dots L_{1}A^{(0)}.</script><p>因为一共有n-1步消元，所以$A^{(n-1)}=L_{n}L{n-1}\dots L_{k}\dots L_{2}L_{1}A^{(0)}$</p><script type="math/tex; mode=display">A^{(n-1)}=\begin{pmatrix}a_{11}^{(0)}&a_{12}^{(0)}&\dots&a_{1n}^{(0)}\\&a_{22}^{(1)}&\dots&a{2n}^{(1)}\\&&\ddots&\vdots\\&&&a_{nn}^{n-1}\end{pmatrix}</script><p>我们注意到$L_{k}$的逆矩阵为</p><script type="math/tex; mode=display">L_{k}^{-1}=\begin{pmatrix}1&&&\\&\ddots&&\\&&1&&\\&&-l_{k+1,k}&1\\&&\vdots&&\ddots\\&&l_{n,k}&&&1\end{pmatrix}</script><p>则$A=A^{(0)}=L_{1}^{-1}L{2}^{-1}\dots L_{n-1}^{-1}A^{(n-1)}=LU$</p><p>其中</p><script type="math/tex; mode=display">L\triangleq L_{1}^{-1}L_{2}^{-1}\dots L_{n-1}^{-1}=\begin{pmatrix}1&&&&\\l_{21}&1\\l_{31}&l_{32}&1\\\vdots&\vdots&&\ddots\\l_{n1}&l_{n2}&\dots&l_{n,n-1}&l_{n,n}\end{pmatrix}\\\quad\\\quad\\U\triangleq A^{(n-1)}\begin{pmatrix}u_{11}&u_{12}&\dots&u_{1n}\\&u_{22}&\dots&u_{2n}\\&&\ddots&\vdots\\&&&u_{nn}\end{pmatrix}</script><p>显然可知L为下三角矩阵而U为上三角矩阵</p><h4 id="LU分解的公式推导"><a href="#LU分解的公式推导" class="headerlink" title="LU分解的公式推导"></a>LU分解的公式推导</h4><p>根据$A=LU$,由矩阵乘法可得</p><script type="math/tex; mode=display">a_{ij}=\sum_{k=1}^{n}l_{ik}u_{kj},\quad i,j=1,2,\dots,n \quad(1)</script><p><code>注：由L为下三角矩阵可知</code><strong>$l_{ij}=0, when j&gt;i$</strong> <code>同样的因为U是上三角矩阵，所以</code><strong>$u_{ij}=0, when i&gt;j$</strong></p><p>由（1）可先计算U的元</p><script type="math/tex; mode=display">a_{ij}=\sum_{k=1}^{i}l_{ik}u_{kj}=\sum_{k=1}^{i-1}l_{ik}u_{kj}+u_{ij}\quad\quad 故\\u_{ij}=a_{ij}-\sum_{k=1}^{i-1}l_{ik}u_{kj}\quad i=1,2,\dots,n;j=i,i+1,\dots,n \\特别的,当i=1时，u_{1j}=a_{1j}(j=1,2,\dots,n)</script><p>然后再计算L的元</p><script type="math/tex; mode=display">a_{ij}=\sum_{k=1}^{j}l_{ik}u_{kj}=\sum_{k=1}^{j-1}l_{ik}u_{kj}+l_{ij}u_{jj}\\\quad\\l_{ij}=\frac{a_{ij}-\sum_{k=1}^{j-1}l_{ik}u_{kj}}{u_{jj}}\\特别的，当j=1时，l_{i1}=\frac{a_{i1}}{u_{11}}</script><p>综上所述，我们可以得到如下公式</p><script type="math/tex; mode=display">\left\{\begin{array}\u_{1j}=a_{1j},\quad\quad\quad\quad\quad j=1,2,\dots,n\\l_{i1}=\frac{a_{i1}}{u_{11}},\quad\quad\quad\quad\quad i=2,3,\dots,n\\u_{ij}=a_{ij}-\sum_{k=1}^{i-1}l_{ik}u_{kj},\quad\quad\quad\quad\quad i=2,3,\dots,n;j=i,i+1,\dots,n\quad\quad\quad（2）\\l_{ij}=\frac{a_{ij}-\sum_{k=1}^{j-1}l_{ik}u_{kj}}{u_{jj}},\quad\quad j=2,3,\dots,n-1;i=j+1,j+2,\dots,n\end{array}\right.</script>]]></content>
      
      
      <categories>
          
          <category> Numerical Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Singleton Pattern</title>
      <link href="/2019/07/01/singleton-pattern/"/>
      <url>/2019/07/01/singleton-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式——"><a href="#单例模式——" class="headerlink" title="单例模式——"></a>单例模式——</h1><p>单例模式是六中23种设计模式中最简单的一种，虽然如此单例模式还是有值得探讨的地方。</p><a id="more"></a><h3 id="单例模式的用处"><a href="#单例模式的用处" class="headerlink" title="单例模式的用处"></a>单例模式的用处</h3><p>顾名思义，单例模式就是想产生一个唯一的实例，而这样做的目的在于：</p><ul><li>对于某些频繁使用的全局对象，如果频繁地创建和销毁会占用很多的系统资源</li><li>在一些场景中，需要唯一的实例，比如序列号、资源管理器等，其本身要就具有唯一性。</li></ul><h3 id="单例模式的简介"><a href="#单例模式的简介" class="headerlink" title="单例模式的简介"></a>单例模式的简介</h3><p>单例模式一般分为两类，俗称懒汉式和饿汉式——懒汉式是指当真正要使用到这个对象时才去创建这个对象；而饿汉式则是在程序运行之初就完成对象的创建。</p><p>要想实现单例模式，首先就要把构造函数私有化，这样外部就无法通过调用构造函数来生成更多的实例了。但是这时就要对外提供产生实例的接口，并在内部完成单例的创建。</p><h3 id="单例模式的几种实现方式"><a href="#单例模式的几种实现方式" class="headerlink" title="单例模式的几种实现方式"></a>单例模式的几种实现方式</h3><ol><li><p>最简单的单例模式可以采用一个静态字段来保存单例，外界调用创建单例的方法时就把这个对象返回。静态字段会在程序一开始就初始化（由CLR实现），因此这是饿汉式的单例模式。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 最简单的单例模式，使用静态字段保存唯一单例，对外提供一个方法访问来获取单例</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">private</span> <span class="keyword">static</span> Singleton _singelton = <span class="keyword">new</span> Singleton();</span><br><span class="line">           <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>           &#123;</span><br><span class="line">   </span><br><span class="line">           &#125;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">CreatInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>           &#123;</span><br><span class="line">               <span class="keyword">return</span> _singelton;</span><br><span class="line">           &#125;</span><br><span class="line">   </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>上面这种单例模式的实现方式存在一定的问题，试想如果这个单例在程序运行一开始并没有被使用，它就会占据系统的资源，会影响程序的效率（一个典型的例子是数据库链接，会占用大量资源）。所以改进的单例模式使用Lazy Loading，也就是懒汉模式。</p><figure class="highlight c#"><figcaption><span>/// &lt;summary&gt;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 实现了Lazy Loading的单例模式，没有使用不会占用资源，但是它不是线程安全的</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton2</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 _singelton = <span class="literal">null</span>;</span><br><span class="line">          <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>          &#123;</span><br><span class="line">              Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">this</span>.GetType().Name&#125;</span> 被构造了"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Change</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>          &#123;</span><br><span class="line">              sum++;</span><br><span class="line">   </span><br><span class="line">          &#125;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">CreatInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>          &#123;</span><br><span class="line">              <span class="keyword">if</span> (_singelton == <span class="literal">null</span>)</span><br><span class="line">              &#123;</span><br><span class="line">                  _singelton = <span class="keyword">new</span> Singleton2();</span><br><span class="line">   </span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> _singelton;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>          &#123;</span><br><span class="line">              Console.WriteLine(_singelton.sum);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>上一种单例模式可以满足一般的需求，但当涉及到多线程并发时，上一种方法会尝试问题，因为它不是线程安全的，所以需要枷锁同步</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 实现了Lazy Loading并且是线程安全的,但是在高并发的情况下会产生等待</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton3</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">private</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 _singleton = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> locker = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">           <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>           &#123;</span><br><span class="line">               Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">this</span>.GetType().Name&#125;</span> 被构造了"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Change</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>           &#123;</span><br><span class="line">               <span class="keyword">lock</span> (locker)</span><br><span class="line">                   sum++;</span><br><span class="line">   </span><br><span class="line">           &#125;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">CreatInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>           &#123;</span><br><span class="line">   </span><br><span class="line">               <span class="keyword">lock</span> (locker)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">if</span> (_singleton == <span class="literal">null</span>)</span><br><span class="line">                   &#123;</span><br><span class="line">                       _singleton = <span class="keyword">new</span> Singleton3();</span><br><span class="line">   </span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> _singleton;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>           &#123;</span><br><span class="line">               Console.WriteLine(_singleton.sum);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>现在已经接近完美了，但是任存在一个问题——性能的消耗，因为每次调用CreateInstance方法时，都要争取锁而排队，会造成阻塞。所以我们希望当单例完成创建后不要再排队，这就有名为了Double-Checked的单例模式</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 使用Double-check,与前一种方法一样，但是性能有提高，单例已生成的情况下不用等待</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton4</span></span><br><span class="line">       &#123;</span><br><span class="line">   </span><br><span class="line">           <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 _singelton = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> locker = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">           <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>           &#123;</span><br><span class="line">               Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">this</span>.GetType().Name&#125;</span> 被构造了"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">CreatInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>           &#123;</span><br><span class="line">               <span class="keyword">if</span> (_singelton == <span class="literal">null</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">lock</span> (locker)</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="keyword">if</span> (_singelton == <span class="literal">null</span>)</span><br><span class="line">                       &#123;</span><br><span class="line">                           _singelton = <span class="keyword">new</span> Singleton4();</span><br><span class="line">   </span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> _singelton;</span><br><span class="line">           &#125;</span><br><span class="line">   </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>现在事情似乎已经很完美了，但是如果细究一下我们会发现这样一个问题：当多个线程访问CreateInstance时，（单例还没有创建的情况下）它们都会进入第一个if语句开始排队，会有一个线程争得锁进入第二个if，然后调用构造函数创建单例，创建完后释放锁，第二个线程进入，第二个线程首先会检查_singleton的状态是否为空，现在问题就出现了，如果这个描述对象是否为空的属性如果没有及时更新，那么就会导致多个实例的产生。这种情况是可能存在的，这是编译器所决定的，由于读写无序则会导致前面的情况出现（先访问了实例是否存在的属性，之后才进行了这个属性的写操作）。改进的方法是在存储单例的静态字段前加上valotile关键词。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> 也可以使用volatile关键字保证线程安全</span></span><br><span class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton5</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> locker = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton5 _singelton = <span class="literal">null</span>;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">CreatInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>          &#123;</span><br><span class="line">              <span class="keyword">if</span> (_singelton == <span class="literal">null</span>)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">lock</span> (locker)</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="keyword">if</span> (_singelton == <span class="literal">null</span>)</span><br><span class="line">                      &#123;</span><br><span class="line">                          _singelton = <span class="keyword">new</span> Singleton5();</span><br><span class="line">                          Console.WriteLine(<span class="string">"Singleton 被构造了"</span>);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> _singelton;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><code>注：volatile关键字的作用是保证被它修饰的对象（包括引用类型、指针类型、整型、具有整数基类型的枚举类型、泛型等）是和改变同步的，即永远是最新的（可以理解为volatile修饰的对象写操作先于读操作），具体原理涉及内存的操作，此处不做叙述。</code></p></li></ol><h3 id="关于单例线程安全问题的直观验证"><a href="#关于单例线程安全问题的直观验证" class="headerlink" title="关于单例线程安全问题的直观验证"></a>关于单例线程安全问题的直观验证</h3><p>   根据上面封装的类，当我们运行如下代码时</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            List&lt;Task&gt; tasks1 = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Singleton2 singleton = Singleton2.CreatInstance();</span><br><span class="line">                tasks1.Add(Task.Run(() =&gt; singleton.Change()));</span><br><span class="line">            &#125;</span><br><span class="line">            Task.WaitAll(tasks1.ToArray());</span><br><span class="line">            Singleton2.Show();</span><br><span class="line">            Console.WriteLine(<span class="string">"***************************************************************"</span>);</span><br><span class="line">            List&lt;Task&gt; tasks2 = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Singleton3 singleton = Singleton3.CreatInstance();</span><br><span class="line">                tasks2.Add(Task.Run(() =&gt; singleton.Change()));</span><br><span class="line">            &#125;</span><br><span class="line">            Task.WaitAll(tasks2.ToArray());</span><br><span class="line">            Singleton3.Show();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>会得到如下的结果</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190701/kma17CT4h8bR.png?imageslim" alt="mark"></p><p>这样我们可以直观地看到线程安全问题确实存在。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gaussian elimination method</title>
      <link href="/2019/06/27/Gaussian%20elimination%20method/"/>
      <url>/2019/06/27/Gaussian%20elimination%20method/</url>
      
        <content type="html"><![CDATA[<h1 id="求解矩阵的高斯消元法"><a href="#求解矩阵的高斯消元法" class="headerlink" title="求解矩阵的高斯消元法"></a>求解矩阵的高斯消元法</h1><p>高斯消元法是求解矩阵最基础的一种算法，具有泛化性强的优点。</p><a id="more"></a><h2 id="消元过程"><a href="#消元过程" class="headerlink" title="消元过程"></a>消元过程</h2><p>对于方程组$Ax=b$（其中A为n阶方阵）可由n-1个消元过程和n-1个回代过程完成求解</p><script type="math/tex; mode=display">\begin{cases}a_{11}x_1+a_{12}x_2+a_{13}x_3+\cdots+a_{1n}x_n=&b_1\\\vdots\\a_{n1}x_1+a_{n2}x_2+a_{n3}x_3+\cdots+a_{nn}x_n=&b_n&\end{cases}\\\begin{pmatrix}a_{11}&a_{12}&a_{13}&\dots&a_{1n}\\a_{21}&a_{22}&a_{23}&\dots&a_{2n}\\\vdots&&&&\vdots\\a_{n1}&a_{n2}&a_{n3}&\dots&a_{nn}\end{pmatrix}\begin{pmatrix}x_1\\x_2\\\vdots\\x_n\end{pmatrix}=\begin{pmatrix}b_1\\b_2\\\vdots\\b_n\end{pmatrix}</script><ol><li><p>矩阵的消元过程(在矩阵有解的情况下)</p><ul><li>第一步消元</li></ul><p>$a_{ij}^{(1)}=a_{ij}^{(0)}-\frac{a_{i1}^{(0)}}  {a_{11}^{(0)}}a_{1j}^{(0)}=a_{ij}^{(0)}-l_{i1}^{(0)}a_{1j}^{(0)} ,\quad i=2,3,\dots,n;j=2,3,\dots,n$</p><p>$b_{i}^{(1)}=b_{i}^{(0)}-\frac{a_{i1}^{(0)}}  {a_{11}^{(0)}}b_{1}^{(0)}=b_{i}^{(0)}-l_{i1}^{(0)}b_{1}^{(0)} ,\quad i=2,3,\dots,n$</p><p>$l_{i1}\triangleq \frac {a_{i1}^{(0)}} {a_{11}^{(0)}},\quad i=2,3,\dots,n$</p><ul><li><p>第k步消元</p><p>$a_{ij}^{(k)}=a_{ij}^{(k-1)}-\frac{a_{ik}^{(k-1)}}  {a_{kk}^{(k-1)}}a_{kj}^{(k-1)}=a_{ij}^{(k-1)}-l_{ik}^{(k-1)}a_{kj}^{(k-1)} ,\quad i=k+1,k+2,\dots,n;j=k=1,k+2,\dots,n$</p><p>$b_{i}^{(k)}=b_{i}^{(k-1)}-\frac{a_{ik}^{(k-1)}}  {a_{kk}^{(k-1)}}b_{k}^{(k-1)}=b_{i}^{(k-1)}-l_{ik}^{(k-1)}b_{k}^{(k-1)} ,\quad i=k+1,k+2,\dots,n$</p><p>$l_{ik}\triangleq \frac {a_{ik}^{(k-1)}} {a_{kk}^{(k-1)}},\quad i=k+1,k+2,\dots,n$</p></li><li><p>消元完成后</p><script type="math/tex; mode=display">A^{(n-1)}=\begin{pmatrix}a_{11}^{(0)}&a_{12}^{(0)}&a_{13}^{(0)}&\cdots&\cdots&a_{1n}^{(0)}\\&a_{22}^{(1)}&a_{23}^{(1)}&\cdots&\cdots&a_{2n}^{(1)}\\&&\ddots\\&&&a_{kk}^{(k-1)}&\cdots&a_{kn}^{(k-1)}\\&&&&\ddots&\vdots\\&&&&&a_{nn}^{(n-1)}\end{pmatrix},\quadb^{(n-1)}=\begin{pmatrix}b_{1}^{(0)}\\b_{2}^{(1)}\\\vdots\\b_{k}^{(k-1)}\\\vdots\\b_{n}^{(n-1)}\end{pmatrix}</script></li></ul></li></ol><ol><li>回代的过程<script type="math/tex; mode=display">\left\{\begin{array}x_n=\frac{b_n^{n-1}}{a_{nn}^{(n-1)}}\\x_k=\frac{ {b_k}^{(k-1)-\sum_{j=k+1}^n(a_{kj}^{(k-1)}x_j)} } {a_{kk}^{(k-1)} },\quad k=n-1,n-2,\dots,2,1.\end{array}\right.</script></li></ol><h2 id="算法的分析"><a href="#算法的分析" class="headerlink" title="算法的分析"></a>算法的分析</h2><ul><li><p>[ ] 在消元的过程中，计算$l_{ik}\triangleq \frac {a_{ik}^{(k-1)}} {a_{kk}^{(k-1)}},\quad i=k+1,k+2,\dots,n$时共有n-k个除法，而计算$a_{ij}^{(k)}=a_{ij}^{(k-1)}-l_{ik}^{(k-1)}a_{kj}^{(k-1)} ,\quad i=k+1,k+2,\dots,n;j=k=1,k+2,\dots,n$时有$(n-k)^2$个乘法，计算$b_{i}^{(k)}=b_{i}^{(k-1)}-l_{ik}^{(k-1)}b_{k}^{(k-1)} ,\quad i=k+1,k+2,\dots,n$时也有n-k个乘法，消元共进行了n-1步，即$k=1,2,\dots,n-1$.</p></li><li><p>[ ] ==所以在消元过程中乘除法的运算量为==</p><script type="math/tex; mode=display">N_1=\sum_{k=1}^{n-1}((n-k)^2+2(n-k))=n^3/3+n^2/2-5n/6.</script></li></ul><ul><li><p>[ ] ==回代过程中乘除法的运算量为==</p><script type="math/tex; mode=display">   N_2=\sum_{k=1}^{n-1}(n-k)+n=n^2/2+n/2.</script><ul><li><p>[ ] ==所以高斯消元法解n阶矩阵的总乘除法运算量为==</p><p>$N=N_1+N_2=n^3/3+n^2-n/3$</p></li></ul></li></ul><h2 id="高斯消元法的程序实现"><a href="#高斯消元法的程序实现" class="headerlink" title="高斯消元法的程序实现"></a>高斯消元法的程序实现</h2><h6 id="我们可以封装一个Matrix类如下"><a href="#我们可以封装一个Matrix类如下" class="headerlink" title="我们可以封装一个Matrix类如下"></a>我们可以封装一个Matrix类如下</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Matrix</span><br><span class="line">&#123;</span><br><span class="line">    public int row = 0;</span><br><span class="line">    public int column = 0;           </span><br><span class="line">    private float[,] matrix;</span><br><span class="line">    public Matrix(int row, int column)</span><br><span class="line">    &#123;</span><br><span class="line">        this.row = row;</span><br><span class="line">        this.column = column;</span><br><span class="line">        matrix = new float[row, column];</span><br><span class="line">        for (int i = 0; i &lt; row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j = 0; j &lt; column; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                string mid = Console.ReadLine();</span><br><span class="line">                var rows = mid.Split(&apos; &apos;);</span><br><span class="line">                foreach (var item in rows)</span><br><span class="line">                &#123;</span><br><span class="line">                    matrix[i, j++] = float.Parse(item);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void DisPlay()</span><br><span class="line">    &#123;                                         </span><br><span class="line">            for (int i = 0; i &lt; this.row; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int j = 0; j &lt; this.column; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(matrix[i, j] + &quot; &quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(&quot;\r&quot;);</span><br><span class="line">            &#125;                </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Simplize()</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i = 0; i &lt; this.row ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (matrix[i, i] != 0)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int k = i + 1; k &lt; row ; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    matrix[k, i] = matrix[k, i] / matrix[i, i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;//这里将消元的中间量存在被消元的位置，因为运算后，这些位置的值为零</span><br><span class="line">            for (int j = i + 1; j &lt; row; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int k = i + 1; k &lt; column; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    matrix[j, k] = matrix[j, k] - matrix[j, i] * matrix[i, k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们输入</p><script type="math/tex; mode=display">\begin{pmatrix}1&2&1&0\\2&2&3&3\\-1&-3&0&2\end{pmatrix}</script><p>时，并调用Simplize和DisPlay方法，将得到结果如下</p><p><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190628/vVp4oxA9X7eB.png?imageslim" alt="mark"></p><p>事实上，这是一个矩阵的LU分解，LU分解在矩阵的研究中有着重要的地位，是十分常用的一个分解方法。</p><h2 id="高斯消元法的缺点"><a href="#高斯消元法的缺点" class="headerlink" title="高斯消元法的缺点"></a>高斯消元法的缺点</h2><ul><li>高斯消元法的运算量较大</li><li>高斯消元法的顺利进行要求矩阵满足某些要求</li></ul>]]></content>
      
      
      <categories>
          
          <category> Numerical Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Decoractor Pattern</title>
      <link href="/2019/06/27/Decoractor-Pattern/"/>
      <url>/2019/06/27/Decoractor-Pattern/</url>
      
        <content type="html"><![CDATA[<p>装饰器模式是一个很著名的设计模式，经常被用于有切面需求的场景，比如插入日志、统计等的逻辑。装饰器模式的作用是能为已经存在的对象添加额外的功能。</p><a id="more"></a><h1 id="设计模式之装饰器模式"><a href="#设计模式之装饰器模式" class="headerlink" title="设计模式之装饰器模式"></a>设计模式之装饰器模式</h1><h2 id="装饰器模式的作用"><a href="#装饰器模式的作用" class="headerlink" title="装饰器模式的作用"></a>装饰器模式的作用</h2><ul><li>在不改变现有对象结构的基础上为其添加新的功能，且并不通过继承而是通过对象之间的关联来实现，使其更加灵活。</li><li>相比于继承来增加新功能（固定的），装饰器模式可以动态的增加新功能，并且功能之间可以进行组合来产生更多的功能，避免了增加功能时对对象的修改</li><li>这是一种实现AOP（面向切面编程）的方法，即将主业务逻辑之外的aspect抽离出来，降低代码的耦合度。</li></ul><h2 id="实现装饰器模式的关键"><a href="#实现装饰器模式的关键" class="headerlink" title="实现装饰器模式的关键"></a>实现装饰器模式的关键</h2><p>装饰器模式无非是要调用一堆方法，但是又不能直接在类中增加逻辑（开闭原则），也不通过继承来实现，而是交给装饰器来实现。那么问题的关键就在于保存这一堆方法，并且使他们之间的顺序可以动态的调整。装饰器模式是通过字段对方法进行缓存（实际上是缓存一个对象，然后调用对象的方法），再通过迭代调用将各个方法以一定的顺序连接起来</p><h2 id="装饰器实现步骤"><a href="#装饰器实现步骤" class="headerlink" title="装饰器实现步骤"></a>装饰器实现步骤</h2><ol><li><p>建立一个继承自对象抽象类的装饰器基类，其中包括缓存字段，构造函数和方法调用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">BaseStudentDecorator</span> : <span class="title">AbstractStudent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> AbstractStudent _student = <span class="literal">null</span>;<span class="comment">//用于缓存一个对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BaseStudentDecorator</span>(<span class="params">AbstractStudent student</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._student = student;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Finish</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._student.Finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>依照单一职责原则创建实现具体功能的装饰器，在其中调用父类的构造函数并复写父类的方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StudentLearningDecoractor</span>(<span class="params">AbstractStudent student</span>) : <span class="title">base</span>(<span class="params">student</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Finish</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//你要实现的逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">base</span>.Finish();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//创建多个，根据要实现的逻辑</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>对装饰器要实现的功能进行注册并调用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student = <span class="keyword">new</span> StudentPreviewDecoractor(student);</span><br><span class="line">          student = <span class="keyword">new</span> StudentLearningDecoractor(student);<span class="comment">//添加了一个功能</span></span><br><span class="line">          student = <span class="keyword">new</span> StudentReviewDecorator(student);<span class="comment">//添加了一个功能</span></span><br><span class="line">          student = <span class="keyword">new</span> StudentPlayDecoractor(student);<span class="comment">//添加了一个功能</span></span><br><span class="line">          student = <span class="keyword">new</span> StudentSleeepDecorator(student);<span class="comment">//添加了一个功能</span></span><br><span class="line">          student.Finish();<span class="comment">//调用</span></span><br></pre></td></tr></table></figure></li></ol><p>   抽象类和具体类</p>   <figure class="highlight c#"><figcaption><span>public abstract class AbstractStudent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractStudent</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">Finish</span>(<span class="params"></span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentCommon</span>:<span class="title">AbstractStudent</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Finish</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">base</span>.Name&#125;</span> finished learning"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentPreview</span>: <span class="title">StudentCommon</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Finish</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>           &#123;</span><br><span class="line">               <span class="keyword">base</span>.Finish();</span><br><span class="line">               Console.WriteLine(<span class="string">"先进行复习"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>   运行结果：</p><p>   <img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190627/5ckTbxL1rvl1.png?imageslim" alt="mark"></p><h2 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h2><ul><li><p>[ ] 当我们在注册方法时，student（不同类型）对象会被保存在基类中</p></li><li><p>[ ] 当我们最后调用finish方法时，会先调用StudentSleeepDecorator的finish方法，finish方法又会调用基类的finish方法，而基类的finish方法会调用之前缓存的student的finish方法…..，从而形成了一系列的调用，相当于一个链表结构。</p></li><li><p>[ ] 在我们实现具体的装饰器时，==base.Finish()和你要实现的逻辑的顺序直接影响到这些逻辑调用的顺序==。当你要实现的逻辑放在前面时，相当于堆栈，遵从先进后出的原则，因此先注册的方法会最后执行（1）；当base.Finish()放在前面时，相当于队列，遵从先进先出，因此先注册的方法最先执行（2）。</p></li><li><p>[ ] 所以当我们要实现在主逻辑（这里为Console.WriteLine($”{base.Name} finished learning”)，即已有对象的方法）前增加若干方法，在主逻辑后也增加若干方法时：</p><ul><li><p>在编写装饰器时时，对于主逻辑之前要执行的方法应按上述（1）来编写装饰器；而对于主逻辑之后要执行的方法应按上述（2）来编写装饰器。</p></li><li><p>在注册时，对于主逻辑之前要执行的方法要逆序注册；对于主逻辑之后要执行的方法要顺序注册</p></li></ul></li></ul><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>  观察者模式较其他设计模式来说要更难以理解，相要真正理解还是得自己敲一下代码，断点运行一下。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-观察者模式</title>
      <link href="/2019/06/27/Observer%20Pattern/"/>
      <url>/2019/06/27/Observer%20Pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之观察者模式"><a href="#设计模式之观察者模式" class="headerlink" title="设计模式之观察者模式"></a>设计模式之观察者模式</h1><a id="more"></a><h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a><strong>什么是观察者模式</strong></h2><p>形象的来说，观察者模式包含一个被观察者（subject）以及若干观察者（observer），observer观察subject，当subject发出一个动作时，observer观察到后作出相应反应。在程序中则是某个类（subject）达到某种触发条件后向其他类发送通知（通常是执行某些方法的信息），然后这些类执行相应的方法。</p><h2 id="观察者模式的作用"><a href="#观察者模式的作用" class="headerlink" title="观察者模式的作用"></a><strong>观察者模式的作用</strong></h2><ol><li>用于程序的解耦。观察者模式通过依赖于抽象的接口来减少类与类之间的直接依赖。</li><li>可以作为一种通知的机制，将更新通知给其它的对象。</li></ol><h2 id="观察者模式的缺点"><a href="#观察者模式的缺点" class="headerlink" title="观察者模式的缺点"></a><strong>观察者模式的缺点</strong></h2><ul><li>当一个被观察者有很多的直接或间接的观察者时，要通知到所有的观察者需要耗费很多的时间。</li><li>当被观察者之间循环依赖时（比如：A通知B改变C，C的改变引起A的改变，继而又触发了A通知B），程序会进入循环调用，导致系统崩溃。</li></ul><h2 id="观察者模式的实现要点"><a href="#观察者模式的实现要点" class="headerlink" title="观察者模式的实现要点"></a><strong>观察者模式的实现要点</strong></h2><ol><li>要创建一个接口用以约束所有被观察者，提供消息传递的通道</li><li>被观察者需要有一个存放消息的容器，一般是接口的一个列表；同时被观察者要具有订阅观察者和取消订阅的方法，用以动态的增加减少观察者的数量。</li><li>实现消息的传递——通过调用接口列表中的各个方法。</li></ol><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"> class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Cat cat = new Cat();</span><br><span class="line">            cat.Add(new Dog());</span><br><span class="line">            cat.Add(new Duck());</span><br><span class="line">            cat.Add(new mouse());           </span><br><span class="line">            cat.Add(new people());</span><br><span class="line">            cat.Miao();</span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">interface Ioberver</span><br><span class="line">&#123;</span><br><span class="line">        void Action();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">class Chicken:Ioberver</span><br><span class="line">    &#123;</span><br><span class="line">        public void Action()</span><br><span class="line">        &#123;</span><br><span class="line">            this.Woo();</span><br><span class="line">        &#125;</span><br><span class="line">        public void Woo()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;&#123;0&#125; Woo&quot;, this.GetType().Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">class Dog : Ioberver</span><br><span class="line">    &#123;</span><br><span class="line">        public void Action()</span><br><span class="line">        &#123;</span><br><span class="line">            this.Wang();</span><br><span class="line">        &#125;</span><br><span class="line">        public void Wang()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;&#123;this.GetType().Name&#125; 汪汪汪&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">class Duck : Ioberver</span><br><span class="line">    &#123;</span><br><span class="line">        public void Action()</span><br><span class="line">        &#123;</span><br><span class="line">            this.Gaga();</span><br><span class="line">        &#125;</span><br><span class="line">        public void Gaga()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;&#123;this.GetType().Name&#125; 嘎嘎嘎&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> class mouse : Ioberver</span><br><span class="line">    &#123;</span><br><span class="line">        public void Action()</span><br><span class="line">        &#123;</span><br><span class="line">            this.Zhi();</span><br><span class="line">        &#125;</span><br><span class="line">        public void Zhi()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;&#123;this.GetType().Name&#125; 吱吱吱&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Cat</span><br><span class="line">&#123;</span><br><span class="line">        public void Miao()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;&#123;0&#125; miao&quot;,this.GetType().Name);</span><br><span class="line">            if(this._ObserverList!=null &amp;&amp; this._ObserverList.Count &gt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                foreach (var observer in _ObserverList)</span><br><span class="line">                &#123;</span><br><span class="line">                    observer.Action();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public List&lt;Ioberver&gt; _ObserverList = new List&lt;Ioberver&gt;();</span><br><span class="line">        public void Add(Ioberver observer)</span><br><span class="line">        &#123;</span><br><span class="line">            this._ObserverList.Add(observer);</span><br><span class="line">        &#125;</span><br><span class="line">        public void Remove(Ioberver observer)</span><br><span class="line">        &#123;</span><br><span class="line">            this._ObserverList.Remove(observer);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><a href="http://pte2s6ppx.bkt.clouddn.com/blog/20190627/Pwc2H0fM3pGs.png?imageslim" target="_blank" rel="noopener"><img src="http://pte2s6ppx.bkt.clouddn.com/blog/20190627/Pwc2H0fM3pGs.png?imageslim" alt="mark"></a></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShortCut Key for Typora</title>
      <link href="/2019/06/21/Tips%20for%20Typora/"/>
      <url>/2019/06/21/Tips%20for%20Typora/</url>
      
        <content type="html"><![CDATA[<p>刚建立了自己的博客，来发一篇文章:smiley:</p><p>最近刚学会使用Typora，刚好把一些快捷键整理一下。</p><a id="more"></a><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><ol><li><p>标题    ctrl+1/2/3…</p><p>数字表示标题的级数 </p></li><li><p>下划线    ctrl+u</p><p>效果：<u>这是下划线</u></p></li><li><p>删除线    shift+alt+5</p><p>效果：<del>这是删除线</del></p></li><li><p>字体加粗    ctrl+b</p><p>效果：<strong>加粗了</strong></p></li><li><p>字体倾斜   ctrl+i</p><p>效果：<em>倾斜的字</em></p></li><li><p>无序列表   -+space+内容</p><p>效果  </p><ul><li>牛奶</li><li>面包<ul><li>巧克力（可嵌套）</li></ul></li></ul></li><li><p>引用   &gt;+space或ctrl+shift+q</p><blockquote><p>效果：这是引用</p></blockquote></li><li><p>插入地址   ctrl+k</p><p><a href="www.baidu.com">百度</a></p></li><li><p>插入表格   ctrl+t</p><p>效果：</p></li></ol><div class="table-container"><table><thead><tr><th>周一</th><th>周二</th><th>周三</th><th>周四</th><th>周五</th></tr></thead><tbody><tr><td>微积分</td><td>放假</td><td>放假</td><td>放假</td><td>放假</td></tr><tr><td>大学物理</td><td>放假</td><td>放假</td><td>放假</td><td>放假</td></tr><tr><td>英语</td><td>放假</td><td>放假</td><td>放假</td><td>放假</td></tr></tbody></table></div><ol><li><p>回到文章顶部   ctrl+home</p><p>效果：无法展示:joy:</p></li><li><p>自动产生目录   [TOC]+enter</p><p>效果：(只有一个标题，将就看一下效果)</p><p>[TOC]</p></li><li><p>选中一整行   ctrl+l</p><p>额，无法展示效果</p></li><li><p>插入代码块   ctrl+alt+b(可能需要自己设置)</p><p>效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">public static void main(string[]args)&#123;</span><br><span class="line">    ConSole.WriteLine(&quot;Hello World&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>搜索内容   ctrl+f    替换   ctrl+h</p><p>效果：无</p></li><li><p>强调、着重标记   ctrl+shift+~(tab上面那个)</p><p>效果：<code>这是重点 这是重点 则是重点</code></p></li><li><p>分隔线   —-+enter或<em>*</em>+enter</p><p>效果：</p><hr></li></ol><ol><li><p>数学公式   $$+enter</p><p>效果：</p><script type="math/tex; mode=display">|i j k |a+b+c^5=2ab</script></li><li><p>表情   :+表情的英文单词</p><p>效果：:artificial_satellite:</p></li><li><p>快速创建新文件   ctrl +n    快速关闭  ctrl+w</p></li><li><p>显示/隐藏大纲   ctrl+shift+l</p></li><li><p>高亮   == 文字 ==（中间没有空格）</p></li><li><p>标题变为普通文本   ctrl+0</p></li><li><p>脚注   <sup><a href="#fn_" id="reffn_"></a></sup></p><p>效果：这是一个脚注<sup><a href="#fn_1" id="reffn_1">1</a></sup></p></li><li><p>行内数学公式   $+esc(然后输入Tex命令)</p></li></ol><p>$\lim_{x\to\infty}\exp(-x)=0$</p><ol><li><p>上下标   <code>x^2^2</code>   <code>H~2~O</code></p><p>效果：x^2^   H~2~O</p></li></ol><blockquote id="fn_1"><sup>1</sup>. 注释<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本编辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/2019/06/21/my-first-blog/"/>
      <url>/2019/06/21/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的第一篇blog"><a href="#这是我的第一篇blog" class="headerlink" title="这是我的第一篇blog"></a>这是我的第一篇blog</h1><h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p>终于成功了很开心</p><p>:happy:</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
